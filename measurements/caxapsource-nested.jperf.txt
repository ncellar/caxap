Method Times by Caller (times inclusive): 35546 ticks
  1: java.lang.Object.<init>: 80,05% (28454 inclusive / 28454 exclusive)
  1: parser.ParseData.<init>: 42,94% (15262 inclusive / 0 exclusive)
    2: parser.ParseErrors.<init>: 18,01% (6402 inclusive / 0 exclusive)
      3: java.lang.Object.<init>: 9,41% (3345 inclusive / 3345 exclusive)
      3: java.util.ArrayList.<init>: 8,6% (3057 inclusive / 3057 exclusive)
    2: java.lang.Object.<init>: 16,59% (5897 inclusive / 5897 exclusive)
    2: java.util.ArrayList.<init>: 8,34% (2963 inclusive / 0 exclusive)
      3: java.util.ArrayList.<init>: 8,34% (2963 inclusive / 2963 exclusive)
  1: parser.Matcher.parse: 42,94% (15262 inclusive / 0 exclusive)
    2: parser.ParseData.<init>: 42,94% (15262 inclusive / 0 exclusive)
      3: parser.ParseErrors.<init>: 18,01% (6402 inclusive / 0 exclusive)
        4: java.lang.Object.<init>: 9,41% (3345 inclusive / 3345 exclusive)
        4: java.util.ArrayList.<init>: 8,6% (3057 inclusive / 3057 exclusive)
      3: java.lang.Object.<init>: 16,59% (5897 inclusive / 5897 exclusive)
      3: java.util.ArrayList.<init>: 8,34% (2963 inclusive / 0 exclusive)
        4: java.util.ArrayList.<init>: 8,34% (2963 inclusive / 2963 exclusive)
  1: java.util.ArrayList.<init>: 34,88% (12400 inclusive / 6020 exclusive)
    2: java.util.AbstractList.<init>: 17,95% (6380 inclusive / 0 exclusive)
      3: java.util.AbstractCollection.<init>: 17,95% (6380 inclusive / 0 exclusive)
        4: java.lang.Object.<init>: 17,95% (6380 inclusive / 6380 exclusive)
  1: parser.ParseErrors.<init>: 18,01% (6402 inclusive / 0 exclusive)
    2: java.lang.Object.<init>: 9,41% (3345 inclusive / 3345 exclusive)
    2: java.util.ArrayList.<init>: 8,6% (3057 inclusive / 3057 exclusive)
  1: java.util.AbstractCollection.<init>: 17,95% (6380 inclusive / 0 exclusive)
    2: java.lang.Object.<init>: 17,95% (6380 inclusive / 6380 exclusive)
  1: java.util.AbstractList.<init>: 17,95% (6380 inclusive / 0 exclusive)
    2: java.util.AbstractCollection.<init>: 17,95% (6380 inclusive / 0 exclusive)
      3: java.lang.Object.<init>: 17,95% (6380 inclusive / 6380 exclusive)
  1: parser.NestedMemo.get: 17,02% (6049 inclusive / 0 exclusive)
    2: parser.Matcher.parse: 16,59% (5897 inclusive / 0 exclusive)
      3: parser.ParseData.<init>: 16,59% (5897 inclusive / 0 exclusive)
        4: java.lang.Object.<init>: 16,59% (5897 inclusive / 5897 exclusive)
    2: parser.NestedMemo.set: 0,43% (152 inclusive / 0 exclusive)
      3: java.util.HashMap.<init>: 0,43% (152 inclusive / 152 exclusive)
  1: java.lang.Number.<init>: 9,34% (3321 inclusive / 0 exclusive)
    2: java.lang.Object.<init>: 9,34% (3321 inclusive / 3321 exclusive)
  1: java.lang.Integer.<init>: 9,34% (3321 inclusive / 0 exclusive)
    2: java.lang.Number.<init>: 9,34% (3321 inclusive / 0 exclusive)
      3: java.lang.Object.<init>: 9,34% (3321 inclusive / 3321 exclusive)
  1: java.lang.Integer.valueOf: 9,34% (3321 inclusive / 0 exclusive)
    2: java.lang.Integer.<init>: 9,34% (3321 inclusive / 0 exclusive)
      3: java.lang.Number.<init>: 9,34% (3321 inclusive / 0 exclusive)
        4: java.lang.Object.<init>: 9,34% (3321 inclusive / 3321 exclusive)
  1: java.util.AbstractList$Itr.<init>: 5,27% (1875 inclusive / 0 exclusive)
    2: java.lang.Object.<init>: 5,27% (1875 inclusive / 1875 exclusive)
  1: java.util.AbstractList.iterator: 5,27% (1875 inclusive / 0 exclusive)
    2: java.util.AbstractList$Itr.<init>: 5,27% (1875 inclusive / 0 exclusive)
      3: java.util.AbstractList$Itr.<init>: 5,27% (1875 inclusive / 0 exclusive)
        4: java.lang.Object.<init>: 5,27% (1875 inclusive / 1875 exclusive)
  1: java.util.HashMap.addEntry: 4,73% (1681 inclusive / 0 exclusive)
    2: java.util.HashMap$Entry.<init>: 4,59% (1632 inclusive / 0 exclusive)
      3: java.lang.Object.<init>: 4,59% (1632 inclusive / 1632 exclusive)
    2: java.util.HashMap.resize: 0,14% (49 inclusive / 49 exclusive)
  1: java.util.HashMap.put: 4,73% (1681 inclusive / 0 exclusive)
    2: java.util.HashMap.addEntry: 4,73% (1681 inclusive / 0 exclusive)
      3: java.util.HashMap$Entry.<init>: 4,59% (1632 inclusive / 0 exclusive)
        4: java.lang.Object.<init>: 4,59% (1632 inclusive / 1632 exclusive)
      3: java.util.HashMap.resize: 0,14% (49 inclusive / 49 exclusive)
  1: java.util.HashMap$Entry.<init>: 4,59% (1632 inclusive / 0 exclusive)
    2: java.lang.Object.<init>: 4,59% (1632 inclusive / 1632 exclusive)
  1: java.util.ArrayList.iterator: 4,3% (1529 inclusive / 4 exclusive)
    2: java.util.ArrayList$Itr.<init>: 4,29% (1525 inclusive / 0 exclusive)
      3: java.util.ArrayList$Itr.<init>: 4,29% (1525 inclusive / 0 exclusive)
        4: java.lang.Object.<init>: 4,29% (1525 inclusive / 1525 exclusive)
  1: java.util.ArrayList$Itr.<init>: 4,29% (1525 inclusive / 0 exclusive)
    2: java.lang.Object.<init>: 4,29% (1525 inclusive / 1525 exclusive)
  1: parser.Matcher.succeed: 4,19% (1490 inclusive / 0 exclusive)
    2: parser.ParseData.succeed: 4,19% (1490 inclusive / 0 exclusive)
      3: parser.Match.<init>: 4,19% (1490 inclusive / 0 exclusive)
        4: java.lang.Object.<init>: 4,19% (1490 inclusive / 1490 exclusive)
  1: parser.ParseData.succeed: 4,19% (1490 inclusive / 0 exclusive)
    2: parser.Match.<init>: 4,19% (1490 inclusive / 0 exclusive)
      3: java.lang.Object.<init>: 4,19% (1490 inclusive / 1490 exclusive)
  1: parser.Match.<init>: 4,19% (1490 inclusive / 0 exclusive)
    2: java.lang.Object.<init>: 4,19% (1490 inclusive / 1490 exclusive)
  1: java.util.Collections$UnmodifiableRandomAccessList.<init>: 4,03% (1434 inclusive / 0 exclusive)
    2: java.util.Collections$UnmodifiableList.<init>: 4,03% (1434 inclusive / 0 exclusive)
      3: java.util.Collections$UnmodifiableCollection.<init>: 4,03% (1434 inclusive / 0 exclusive)
        4: java.lang.Object.<init>: 4,03% (1434 inclusive / 1434 exclusive)
  1: java.util.Collections$UnmodifiableCollection.<init>: 4,03% (1434 inclusive / 0 exclusive)
    2: java.lang.Object.<init>: 4,03% (1434 inclusive / 1434 exclusive)
  1: java.util.Collections$UnmodifiableList.<init>: 4,03% (1434 inclusive / 0 exclusive)
    2: java.util.Collections$UnmodifiableCollection.<init>: 4,03% (1434 inclusive / 0 exclusive)
      3: java.lang.Object.<init>: 4,03% (1434 inclusive / 1434 exclusive)
  1: java.lang.String.substring: 4,01% (1426 inclusive / 0 exclusive)
    2: java.lang.String.<init>: 4,01% (1426 inclusive / 0 exclusive)
      3: java.lang.Object.<init>: 4,01% (1426 inclusive / 1426 exclusive)
  1: source.SourceFileText.at: 4,01% (1426 inclusive / 0 exclusive)
    2: java.lang.String.substring: 4,01% (1426 inclusive / 0 exclusive)
      3: java.lang.String.<init>: 4,01% (1426 inclusive / 0 exclusive)
        4: java.lang.Object.<init>: 4,01% (1426 inclusive / 1426 exclusive)
  1: java.lang.String.<init>: 4,01% (1426 inclusive / 0 exclusive)
    2: java.lang.Object.<init>: 4,01% (1426 inclusive / 1426 exclusive)
  1: source.SourceFileText.<init>: 1,14% (405 inclusive / 0 exclusive)
    2: util.apache.CharSequenceTranslator.translate: 0,79% (282 inclusive / 0 exclusive)
      3: util.apache.CharSequenceTranslator.translate: 0,79% (282 inclusive / 0 exclusive)
        4: java.lang.Character.toChars: 0,79% (282 inclusive / 282 exclusive)
    2: java.io.FileInputStream.<init>: 0,33% (119 inclusive / 0 exclusive)
      3: java.io.FileInputStream.open: 0,33% (119 inclusive / 119 exclusive)
    2: sun.nio.ch.FileChannelImpl.map: 0,01% (4 inclusive / 0 exclusive)
      3: sun.nio.ch.FileChannelImpl.map0: 0,01% (4 inclusive / 4 exclusive)
  1: parser.NestedMemo.set: 0,93% (330 inclusive / 0 exclusive)
    2: java.util.HashMap.<init>: 0,79% (281 inclusive / 152 exclusive)
      3: java.util.AbstractMap.<init>: 0,36% (129 inclusive / 0 exclusive)
        4: java.lang.Object.<init>: 0,36% (129 inclusive / 129 exclusive)
    2: java.util.HashMap.put: 0,14% (49 inclusive / 0 exclusive)
      3: java.util.HashMap.addEntry: 0,14% (49 inclusive / 0 exclusive)
        4: java.util.HashMap.resize: 0,14% (49 inclusive / 49 exclusive)
  1: util.apache.CharSequenceTranslator.translate: 0,79% (282 inclusive / 0 exclusive)
    2: java.lang.Character.toChars: 0,79% (282 inclusive / 282 exclusive)
  1: java.lang.Character.toChars: 0,79% (282 inclusive / 282 exclusive)
  1: java.util.HashMap.<init>: 0,79% (281 inclusive / 152 exclusive)
    2: java.util.AbstractMap.<init>: 0,36% (129 inclusive / 0 exclusive)
      3: java.lang.Object.<init>: 0,36% (129 inclusive / 129 exclusive)
  1: java.util.ArrayList.ensureCapacityInternal: 0,55% (197 inclusive / 0 exclusive)
    2: java.util.ArrayList.grow: 0,55% (197 inclusive / 0 exclusive)
      3: java.util.Arrays.copyOf: 0,55% (197 inclusive / 0 exclusive)
        4: java.util.Arrays.copyOf: 0,55% (197 inclusive / 197 exclusive)
  1: java.util.Arrays.copyOf: 0,55% (197 inclusive / 197 exclusive)
  1: java.util.ArrayList.grow: 0,55% (197 inclusive / 0 exclusive)
    2: java.util.Arrays.copyOf: 0,55% (197 inclusive / 0 exclusive)
      3: java.util.Arrays.copyOf: 0,55% (197 inclusive / 197 exclusive)
  1: java.io.FileInputStream.open: 0,52% (184 inclusive / 184 exclusive)
  1: java.io.FileInputStream.<init>: 0,52% (184 inclusive / 0 exclusive)
    2: java.io.FileInputStream.open: 0,52% (184 inclusive / 184 exclusive)
  1: parser.Matcher.visitChild: 0,43% (152 inclusive / 0 exclusive)
    2: parser.NestedMemo.get: 0,43% (152 inclusive / 0 exclusive)
      3: parser.NestedMemo.set: 0,43% (152 inclusive / 0 exclusive)
        4: java.util.HashMap.<init>: 0,43% (152 inclusive / 152 exclusive)
  1: java.util.AbstractMap.<init>: 0,36% (129 inclusive / 0 exclusive)
    2: java.lang.Object.<init>: 0,36% (129 inclusive / 129 exclusive)
  1: sun.misc.URLClassPath$FileLoader$1.getInputStream: 0,18% (65 inclusive / 0 exclusive)
    2: java.io.FileInputStream.<init>: 0,18% (65 inclusive / 0 exclusive)
      3: java.io.FileInputStream.open: 0,18% (65 inclusive / 65 exclusive)
  1: sun.misc.Resource.cachedInputStream: 0,18% (65 inclusive / 0 exclusive)
    2: sun.misc.URLClassPath$FileLoader$1.getInputStream: 0,18% (65 inclusive / 0 exclusive)
      3: java.io.FileInputStream.<init>: 0,18% (65 inclusive / 0 exclusive)
        4: java.io.FileInputStream.open: 0,18% (65 inclusive / 65 exclusive)
  1: java.io.File.exists: 0,16% (57 inclusive / 0 exclusive)
    2: java.io.WinNTFileSystem.getBooleanAttributes: 0,16% (57 inclusive / 57 exclusive)
  1: java.io.WinNTFileSystem.getBooleanAttributes: 0,16% (57 inclusive / 57 exclusive)
  1: sun.misc.URLClassPath.getResource: 0,15% (53 inclusive / 0 exclusive)
    2: sun.misc.URLClassPath$FileLoader.getResource: 0,15% (53 inclusive / 0 exclusive)
      3: java.io.File.exists: 0,15% (53 inclusive / 0 exclusive)
        4: java.io.WinNTFileSystem.getBooleanAttributes: 0,15% (53 inclusive / 53 exclusive)
  1: sun.misc.URLClassPath$FileLoader.getResource: 0,15% (53 inclusive / 0 exclusive)
    2: java.io.File.exists: 0,15% (53 inclusive / 0 exclusive)
      3: java.io.WinNTFileSystem.getBooleanAttributes: 0,15% (53 inclusive / 53 exclusive)
  1: java.util.HashMap.resize: 0,14% (49 inclusive / 49 exclusive)
  1: sun.misc.Resource.getBytes: 0,14% (48 inclusive / 0 exclusive)
    2: java.util.zip.ZipFile$ZipFileInputStream.read: 0,11% (40 inclusive / 0 exclusive)
      3: java.util.zip.ZipFile.access$1400: 0,11% (40 inclusive / 0 exclusive)
        4: java.util.zip.ZipFile.read: 0,11% (40 inclusive / 40 exclusive)
    2: sun.misc.URLClassPath$FileLoader$1.getContentLength: 0,02% (8 inclusive / 0 exclusive)
      3: java.io.File.length: 0,02% (8 inclusive / 0 exclusive)
        4: java.io.WinNTFileSystem.getLength: 0,02% (8 inclusive / 8 exclusive)
  1: java.lang.ClassLoader.findBootstrapClass: 0,11% (40 inclusive / 40 exclusive)
  1: java.lang.ClassLoader.findBootstrapClassOrNull: 0,11% (40 inclusive / 0 exclusive)
    2: java.lang.ClassLoader.findBootstrapClass: 0,11% (40 inclusive / 40 exclusive)
  1: java.util.zip.ZipFile.access$1400: 0,11% (40 inclusive / 0 exclusive)
    2: java.util.zip.ZipFile.read: 0,11% (40 inclusive / 40 exclusive)
  1: java.util.zip.ZipFile$ZipFileInputStream.read: 0,11% (40 inclusive / 0 exclusive)
    2: java.util.zip.ZipFile.access$1400: 0,11% (40 inclusive / 0 exclusive)
      3: java.util.zip.ZipFile.read: 0,11% (40 inclusive / 40 exclusive)
  1: java.lang.ClassLoader.loadClass: 0,11% (40 inclusive / 0 exclusive)
    2: java.lang.ClassLoader.findBootstrapClassOrNull: 0,11% (40 inclusive / 0 exclusive)
      3: java.lang.ClassLoader.findBootstrapClass: 0,11% (40 inclusive / 40 exclusive)
  1: java.util.zip.ZipFile.read: 0,11% (40 inclusive / 40 exclusive)
  1: sun.nio.fs.WindowsDirectoryStream.<init>: 0,06% (21 inclusive / 0 exclusive)
    2: sun.nio.fs.WindowsNativeDispatcher.FindFirstFile: 0,06% (21 inclusive / 0 exclusive)
      3: sun.nio.fs.WindowsNativeDispatcher.FindFirstFile0: 0,06% (21 inclusive / 21 exclusive)
  1: sun.nio.fs.WindowsNativeDispatcher.FindFirstFile: 0,06% (21 inclusive / 0 exclusive)
    2: sun.nio.fs.WindowsNativeDispatcher.FindFirstFile0: 0,06% (21 inclusive / 21 exclusive)
  1: sun.nio.fs.WindowsNativeDispatcher.FindFirstFile0: 0,06% (21 inclusive / 21 exclusive)
  1: sun.nio.fs.WindowsFileSystemProvider.newDirectoryStream: 0,06% (21 inclusive / 0 exclusive)
    2: sun.nio.fs.WindowsDirectoryStream.<init>: 0,06% (21 inclusive / 0 exclusive)
      3: sun.nio.fs.WindowsNativeDispatcher.FindFirstFile: 0,06% (21 inclusive / 0 exclusive)
        4: sun.nio.fs.WindowsNativeDispatcher.FindFirstFile0: 0,06% (21 inclusive / 21 exclusive)
  1: java.lang.reflect.Field.getFieldAccessor: 0,05% (16 inclusive / 0 exclusive)
    2: java.lang.reflect.Field.acquireFieldAccessor: 0,05% (16 inclusive / 0 exclusive)
      3: sun.reflect.ReflectionFactory.newFieldAccessor: 0,05% (16 inclusive / 6 exclusive)
        4: sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor: 0,03% (10 inclusive / 10 exclusive)
  1: sun.reflect.ReflectionFactory.newFieldAccessor: 0,05% (16 inclusive / 6 exclusive)
    2: sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor: 0,03% (10 inclusive / 10 exclusive)
  1: java.lang.reflect.Field.acquireFieldAccessor: 0,05% (16 inclusive / 0 exclusive)
    2: sun.reflect.ReflectionFactory.newFieldAccessor: 0,05% (16 inclusive / 6 exclusive)
      3: sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor: 0,03% (10 inclusive / 10 exclusive)
  1: sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor: 0,03% (10 inclusive / 10 exclusive)
  1: java.util.zip.ZipFile.open: 0,02% (8 inclusive / 8 exclusive)
  1: java.io.File.length: 0,02% (8 inclusive / 0 exclusive)
    2: java.io.WinNTFileSystem.getLength: 0,02% (8 inclusive / 8 exclusive)
  1: java.util.jar.JarFile.<init>: 0,02% (8 inclusive / 0 exclusive)
    2: java.util.zip.ZipFile.<init>: 0,02% (8 inclusive / 0 exclusive)
      3: java.util.zip.ZipFile.<init>: 0,02% (8 inclusive / 0 exclusive)
        4: java.util.zip.ZipFile.open: 0,02% (8 inclusive / 8 exclusive)
  1: java.util.zip.ZipFile.<init>: 0,02% (8 inclusive / 0 exclusive)
    2: java.util.zip.ZipFile.open: 0,02% (8 inclusive / 8 exclusive)
  1: java.io.WinNTFileSystem.getLength: 0,02% (8 inclusive / 8 exclusive)
  1: sun.misc.URLClassPath$FileLoader$1.getContentLength: 0,02% (8 inclusive / 0 exclusive)
    2: java.io.File.length: 0,02% (8 inclusive / 0 exclusive)
      3: java.io.WinNTFileSystem.getLength: 0,02% (8 inclusive / 8 exclusive)
  1: java.lang.reflect.Field.get: 0,02% (6 inclusive / 0 exclusive)
    2: java.lang.reflect.Field.getFieldAccessor: 0,02% (6 inclusive / 0 exclusive)
      3: java.lang.reflect.Field.acquireFieldAccessor: 0,02% (6 inclusive / 0 exclusive)
        4: sun.reflect.ReflectionFactory.newFieldAccessor: 0,02% (6 inclusive / 6 exclusive)
  1: java.lang.Runtime.loadLibrary0: 0,01% (5 inclusive / 0 exclusive)
    2: java.lang.ClassLoader.loadLibrary: 0,01% (5 inclusive / 0 exclusive)
      3: java.lang.ClassLoader.loadLibrary0: 0,01% (5 inclusive / 0 exclusive)
        4: java.lang.ClassLoader$NativeLibrary.load: 0,01% (5 inclusive / 5 exclusive)
  1: java.lang.ClassLoader.loadLibrary0: 0,01% (5 inclusive / 0 exclusive)
    2: java.lang.ClassLoader$NativeLibrary.load: 0,01% (5 inclusive / 5 exclusive)
  1: java.lang.ClassLoader.loadLibrary: 0,01% (5 inclusive / 0 exclusive)
    2: java.lang.ClassLoader.loadLibrary0: 0,01% (5 inclusive / 0 exclusive)
      3: java.lang.ClassLoader$NativeLibrary.load: 0,01% (5 inclusive / 5 exclusive)
  1: java.lang.ClassLoader$NativeLibrary.load: 0,01% (5 inclusive / 5 exclusive)
  1: java.util.zip.ZipFile.getEntry: 0,01% (5 inclusive / 5 exclusive)
  1: java.util.jar.JarFile.getJarEntry: 0,01% (5 inclusive / 0 exclusive)
    2: java.util.jar.JarFile.getEntry: 0,01% (5 inclusive / 0 exclusive)
      3: java.util.zip.ZipFile.getEntry: 0,01% (5 inclusive / 0 exclusive)
        4: java.util.zip.ZipFile.getEntry: 0,01% (5 inclusive / 5 exclusive)
  1: java.util.jar.JarFile.getEntry: 0,01% (5 inclusive / 0 exclusive)
    2: java.util.zip.ZipFile.getEntry: 0,01% (5 inclusive / 0 exclusive)
      3: java.util.zip.ZipFile.getEntry: 0,01% (5 inclusive / 5 exclusive)
  1: sun.nio.ch.FileChannelImpl.map: 0,01% (4 inclusive / 0 exclusive)
    2: sun.nio.ch.FileChannelImpl.map0: 0,01% (4 inclusive / 4 exclusive)
  1: sun.misc.PostVMInitHook.trackJavaUsage: 0,01% (4 inclusive / 0 exclusive)
    2: java.io.File.exists: 0,01% (4 inclusive / 0 exclusive)
      3: java.io.WinNTFileSystem.getBooleanAttributes: 0,01% (4 inclusive / 4 exclusive)
  1: sun.misc.PostVMInitHook.run: 0,01% (4 inclusive / 0 exclusive)
    2: sun.misc.PostVMInitHook.trackJavaUsage: 0,01% (4 inclusive / 0 exclusive)
      3: java.io.File.exists: 0,01% (4 inclusive / 0 exclusive)
        4: java.io.WinNTFileSystem.getBooleanAttributes: 0,01% (4 inclusive / 4 exclusive)
  1: sun.nio.ch.FileChannelImpl.map0: 0,01% (4 inclusive / 4 exclusive)
  1: main.ParseOpenJDK.main: 0,01% (4 inclusive / 0 exclusive)
    2: java.util.ArrayList.iterator: 0,01% (4 inclusive / 4 exclusive)

Method Times by Line Number (times inclusive): 35546 ticks
  1: java.lang.Object.<init>: 80,05% (28454 inclusive)
    2: (Object.java:37): 80,05% (28454 inclusive)
  1: parser.ParseData.<init>: 42,94% (15262 inclusive)
    2: (ParseData.java:44): 18,01% (6402 inclusive)
    2: (ParseData.java:38): 16,59% (5897 inclusive)
    2: (ParseData.java:47): 8,34% (2963 inclusive)
  1: parser.Matcher.parse: 42,94% (15262 inclusive)
    2: (Matcher.java:133): 42,94% (15262 inclusive)
  1: java.util.ArrayList.<init>: 34,88% (12400 inclusive)
    2: (ArrayList.java:128): 17,95% (6380 inclusive)
    2: (ArrayList.java:132): 16,94% (6020 inclusive)
    2: (ArrayList.java:139): 0% (0 inclusive)
  1: parser.ParseErrors.<init>: 18,01% (6402 inclusive)
    2: (ParseErrors.java:89): 9,41% (3345 inclusive)
    2: (ParseErrors.java:81): 8,6% (3057 inclusive)
  1: java.util.AbstractCollection.<init>: 17,95% (6380 inclusive)
    2: (AbstractCollection.java:66): 17,95% (6380 inclusive)
  1: java.util.AbstractList.<init>: 17,95% (6380 inclusive)
    2: (AbstractList.java:76): 17,95% (6380 inclusive)
  1: parser.NestedMemo.get: 17,02% (6049 inclusive)
    2: (NestedMemo.java:33): 12,39% (4404 inclusive)
    2: (NestedMemo.java:41): 4,2% (1493 inclusive)
    2: (NestedMemo.java:42): 0,43% (152 inclusive)
  1: java.lang.Number.<init>: 9,34% (3321 inclusive)
    2: (Number.java:49): 9,34% (3321 inclusive)
  1: java.lang.Integer.<init>: 9,34% (3321 inclusive)
    2: (Integer.java:659): 9,34% (3321 inclusive)
  1: java.lang.Integer.valueOf: 9,34% (3321 inclusive)
    2: (Integer.java:642): 9,34% (3321 inclusive)
  1: java.util.AbstractList$Itr.<init>: 5,27% (1875 inclusive)
    2: (AbstractList.java:330): 5,27% (1875 inclusive)
  1: java.util.AbstractList.iterator: 5,27% (1875 inclusive)
    2: (AbstractList.java:288): 5,27% (1875 inclusive)
  1: java.util.HashMap.addEntry: 4,73% (1681 inclusive)
    2: (HashMap.java:766): 4,59% (1632 inclusive)
    2: (HashMap.java:768): 0,14% (49 inclusive)
  1: java.util.HashMap.put: 4,73% (1681 inclusive)
    2: (HashMap.java:402): 4,73% (1681 inclusive)
  1: java.util.HashMap$Entry.<init>: 4,59% (1632 inclusive)
    2: (HashMap.java:696): 4,59% (1632 inclusive)
  1: java.util.ArrayList.iterator: 4,3% (1529 inclusive)
    2: (ArrayList.java:774): 4,3% (1529 inclusive)
  1: java.util.ArrayList$Itr.<init>: 4,29% (1525 inclusive)
    2: (ArrayList.java:780): 4,29% (1525 inclusive)
  1: parser.Matcher.succeed: 4,19% (1490 inclusive)
    2: (Matcher.java:160): 4,19% (1490 inclusive)
  1: parser.ParseData.succeed: 4,19% (1490 inclusive)
    2: (ParseData.java:83): 4,19% (1490 inclusive)
  1: parser.Match.<init>: 4,19% (1490 inclusive)
    2: (Match.java:87): 4,19% (1490 inclusive)
  1: java.util.Collections$UnmodifiableRandomAccessList.<init>: 4,03% (1434 inclusive)
    2: (Collections.java:1282): 4,03% (1434 inclusive)
  1: java.util.Collections$UnmodifiableCollection.<init>: 4,03% (1434 inclusive)
    2: (Collections.java:1049): 4,03% (1434 inclusive)
  1: java.util.Collections$UnmodifiableList.<init>: 4,03% (1434 inclusive)
    2: (Collections.java:1204): 4,03% (1434 inclusive)
  1: java.lang.String.substring: 4,01% (1426 inclusive)
    2: (String.java:1960): 4,01% (1426 inclusive)
  1: source.SourceFileText.at: 4,01% (1426 inclusive)
    2: (SourceFileText.java:143): 4,01% (1426 inclusive)
  1: java.lang.String.<init>: 4,01% (1426 inclusive)
    2: (String.java:645): 4,01% (1426 inclusive)
  1: source.SourceFileText.<init>: 1,14% (405 inclusive)
    2: (SourceFileText.java:118): 0,79% (282 inclusive)
    2: (SourceFileText.java:107): 0,33% (119 inclusive)
    2: (SourceFileText.java:112): 0,01% (4 inclusive)
    2: (SourceFileText.java:99): 0% (0 inclusive)
  1: parser.NestedMemo.set: 0,93% (330 inclusive)
    2: (NestedMemo.java:56): 0,79% (281 inclusive)
    2: (NestedMemo.java:60): 0,14% (49 inclusive)
  1: util.apache.CharSequenceTranslator.translate: 0,79% (282 inclusive)
    2: (CharSequenceTranslator.java:87): 0,79% (282 inclusive)
    2: (CharSequenceTranslator.java:59): 0% (0 inclusive)
  1: java.lang.Character.toChars: 0,79% (282 inclusive)
    2: (Character.java:4976): 0,79% (282 inclusive)
  1: java.util.HashMap.<init>: 0,79% (281 inclusive)
    2: (HashMap.java:226): 0,43% (152 inclusive)
    2: (HashMap.java:223): 0,36% (129 inclusive)
  1: java.util.ArrayList.ensureCapacityInternal: 0,55% (197 inclusive)
    2: (ArrayList.java:187): 0,55% (197 inclusive)
  1: java.util.Arrays.copyOf: 0,55% (197 inclusive)
    2: (Arrays.java:2245): 0,55% (197 inclusive)
    2: (Arrays.java:2219): 0% (0 inclusive)
  1: java.util.ArrayList.grow: 0,55% (197 inclusive)
    2: (ArrayList.java:213): 0,55% (197 inclusive)
  1: java.io.FileInputStream.open: 0,52% (184 inclusive)
    2: (FileInputStream.java:Unknown line): 0,52% (184 inclusive)
  1: java.io.FileInputStream.<init>: 0,52% (184 inclusive)
    2: (FileInputStream.java:138): 0,52% (184 inclusive)
  1: parser.Matcher.visitChild: 0,43% (152 inclusive)
    2: (Matcher.java:149): 0,43% (152 inclusive)
  1: java.util.AbstractMap.<init>: 0,36% (129 inclusive)
    2: (AbstractMap.java:73): 0,36% (129 inclusive)
  1: sun.misc.URLClassPath$FileLoader$1.getInputStream: 0,18% (65 inclusive)
    2: (URLClassPath.java:1063): 0,18% (65 inclusive)
  1: sun.misc.Resource.cachedInputStream: 0,18% (65 inclusive)
    2: (Resource.java:77): 0,18% (65 inclusive)
  1: java.io.File.exists: 0,16% (57 inclusive)
    2: (File.java:772): 0,16% (57 inclusive)
  1: java.io.WinNTFileSystem.getBooleanAttributes: 0,16% (57 inclusive)
    2: (WinNTFileSystem.java:Unknown line): 0,16% (57 inclusive)
  1: sun.misc.URLClassPath.getResource: 0,15% (53 inclusive)
    2: (URLClassPath.java:195): 0,15% (53 inclusive)
  1: sun.misc.URLClassPath$FileLoader.getResource: 0,15% (53 inclusive)
    2: (URLClassPath.java:1057): 0,15% (53 inclusive)
  1: java.util.HashMap.resize: 0,14% (49 inclusive)
    2: (HashMap.java:477): 0,14% (49 inclusive)
  1: sun.misc.Resource.getBytes: 0,14% (48 inclusive)
    2: (Resource.java:124): 0,11% (40 inclusive)
    2: (Resource.java:100): 0,02% (8 inclusive)
  1: java.lang.ClassLoader.findBootstrapClass: 0,11% (40 inclusive)
    2: (ClassLoader.java:Unknown line): 0,11% (40 inclusive)
  1: java.lang.ClassLoader.findBootstrapClassOrNull: 0,11% (40 inclusive)
    2: (ClassLoader.java:1061): 0,11% (40 inclusive)
  1: java.util.zip.ZipFile.access$1400: 0,11% (40 inclusive)
    2: (ZipFile.java:56): 0,11% (40 inclusive)
  1: java.util.zip.ZipFile$ZipFileInputStream.read: 0,11% (40 inclusive)
    2: (ZipFile.java:677): 0,11% (40 inclusive)
  1: java.lang.ClassLoader.loadClass: 0,11% (40 inclusive)
    2: (ClassLoader.java:412): 0,11% (40 inclusive)
    2: (ClassLoader.java:410): 0% (0 inclusive)
  1: java.util.zip.ZipFile.read: 0,11% (40 inclusive)
    2: (ZipFile.java:Unknown line): 0,11% (40 inclusive)
  1: sun.nio.fs.WindowsDirectoryStream.<init>: 0,06% (21 inclusive)
    2: (WindowsDirectoryStream.java:78): 0,06% (21 inclusive)
  1: sun.nio.fs.WindowsNativeDispatcher.FindFirstFile: 0,06% (21 inclusive)
    2: (WindowsNativeDispatcher.java:174): 0,06% (21 inclusive)
  1: sun.nio.fs.WindowsNativeDispatcher.FindFirstFile0: 0,06% (21 inclusive)
    2: (WindowsNativeDispatcher.java:Unknown line): 0,06% (21 inclusive)
  1: sun.nio.fs.WindowsFileSystemProvider.newDirectoryStream: 0,06% (21 inclusive)
    2: (WindowsFileSystemProvider.java:526): 0,06% (21 inclusive)
  1: java.lang.reflect.Field.getFieldAccessor: 0,05% (16 inclusive)
    2: (Field.java:930): 0,05% (16 inclusive)
  1: sun.reflect.ReflectionFactory.newFieldAccessor: 0,05% (16 inclusive)
    2: (ReflectionFactory.java:140): 0,05% (16 inclusive)
  1: java.lang.reflect.Field.acquireFieldAccessor: 0,05% (16 inclusive)
    2: (Field.java:949): 0,05% (16 inclusive)
  1: sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor: 0,03% (10 inclusive)
    2: (UnsafeFieldAccessorFactory.java:125): 0,03% (10 inclusive)
  1: java.util.zip.ZipFile.open: 0,02% (8 inclusive)
    2: (ZipFile.java:Unknown line): 0,02% (8 inclusive)
  1: java.io.File.length: 0,02% (8 inclusive)
    2: (File.java:912): 0,02% (8 inclusive)
  1: java.util.jar.JarFile.<init>: 0,02% (8 inclusive)
    2: (JarFile.java:152): 0,02% (8 inclusive)
  1: java.util.zip.ZipFile.<init>: 0,02% (8 inclusive)
    2: (ZipFile.java:214): 0,02% (8 inclusive)
    2: (ZipFile.java:144): 0% (0 inclusive)
  1: java.io.WinNTFileSystem.getLength: 0,02% (8 inclusive)
    2: (WinNTFileSystem.java:Unknown line): 0,02% (8 inclusive)
  1: sun.misc.URLClassPath$FileLoader$1.getContentLength: 0,02% (8 inclusive)
    2: (URLClassPath.java:1065): 0,02% (8 inclusive)
  1: java.lang.reflect.Field.get: 0,02% (6 inclusive)
    2: (Field.java:372): 0,02% (6 inclusive)
  1: java.lang.Runtime.loadLibrary0: 0,01% (5 inclusive)
    2: (Runtime.java:845): 0,01% (5 inclusive)
  1: java.lang.ClassLoader.loadLibrary0: 0,01% (5 inclusive)
    2: (ClassLoader.java:1928): 0,01% (5 inclusive)
  1: java.lang.ClassLoader.loadLibrary: 0,01% (5 inclusive)
    2: (ClassLoader.java:1846): 0,01% (5 inclusive)
  1: java.lang.ClassLoader$NativeLibrary.load: 0,01% (5 inclusive)
    2: (ClassLoader.java:Unknown line): 0,01% (5 inclusive)
  1: java.util.zip.ZipFile.getEntry: 0,01% (5 inclusive)
    2: (ZipFile.java:Unknown line): 0,01% (5 inclusive)
    2: (ZipFile.java:304): 0% (0 inclusive)
  1: java.util.jar.JarFile.getJarEntry: 0,01% (5 inclusive)
    2: (JarFile.java:208): 0,01% (5 inclusive)
  1: java.util.jar.JarFile.getEntry: 0,01% (5 inclusive)
    2: (JarFile.java:225): 0,01% (5 inclusive)
  1: sun.nio.ch.FileChannelImpl.map: 0,01% (4 inclusive)
    2: (FileChannelImpl.java:835): 0,01% (4 inclusive)
  1: sun.misc.PostVMInitHook.trackJavaUsage: 0,01% (4 inclusive)
    2: (PostVMInitHook.java:42): 0,01% (4 inclusive)
  1: sun.misc.PostVMInitHook.run: 0,01% (4 inclusive)
    2: (PostVMInitHook.java:22): 0,01% (4 inclusive)
  1: sun.nio.ch.FileChannelImpl.map0: 0,01% (4 inclusive)
    2: (FileChannelImpl.java:Unknown line): 0,01% (4 inclusive)
  1: main.ParseOpenJDK.main: 0,01% (4 inclusive)
    2: (ParseOpenJDK.java:46): 0,01% (4 inclusive)

Method Times by Callee (times inclusive): 35546 ticks
  1: java.lang.Object.<init>: 80,05% (28454 inclusive)
    2: java.util.AbstractCollection.<init>: 17,95% (6380 inclusive)
      3: java.util.AbstractList.<init>: 17,95% (6380 inclusive)
        4: java.util.ArrayList.<init>: 17,95% (6380 inclusive)
    2: parser.ParseData.<init>: 16,59% (5897 inclusive)
      3: parser.Matcher.parse: 16,59% (5897 inclusive)
        4: parser.NestedMemo.get: 16,59% (5897 inclusive)
    2: parser.ParseErrors.<init>: 9,41% (3345 inclusive)
      3: parser.ParseData.<init>: 9,41% (3345 inclusive)
        4: parser.Matcher.parse: 9,41% (3345 inclusive)
    2: java.lang.Number.<init>: 9,34% (3321 inclusive)
      3: java.lang.Integer.<init>: 9,34% (3321 inclusive)
        4: java.lang.Integer.valueOf: 9,34% (3321 inclusive)
    2: java.util.AbstractList$Itr.<init>: 5,27% (1875 inclusive)
      3: java.util.AbstractList$Itr.<init>: 5,27% (1875 inclusive)
        4: java.util.AbstractList.iterator: 5,27% (1875 inclusive)
    2: java.util.HashMap$Entry.<init>: 4,59% (1632 inclusive)
      3: java.util.HashMap.addEntry: 4,59% (1632 inclusive)
        4: java.util.HashMap.put: 4,59% (1632 inclusive)
    2: java.util.ArrayList$Itr.<init>: 4,29% (1525 inclusive)
      3: java.util.ArrayList$Itr.<init>: 4,29% (1525 inclusive)
        4: java.util.ArrayList.iterator: 4,29% (1525 inclusive)
    2: parser.Match.<init>: 4,19% (1490 inclusive)
      3: parser.ParseData.succeed: 4,19% (1490 inclusive)
        4: parser.Matcher.succeed: 4,19% (1490 inclusive)
    2: java.util.Collections$UnmodifiableCollection.<init>: 4,03% (1434 inclusive)
      3: java.util.Collections$UnmodifiableList.<init>: 4,03% (1434 inclusive)
        4: java.util.Collections$UnmodifiableRandomAccessList.<init>: 4,03% (1434 inclusive)
    2: java.lang.String.<init>: 4,01% (1426 inclusive)
      3: java.lang.String.substring: 4,01% (1426 inclusive)
        4: source.SourceFileText.at: 4,01% (1426 inclusive)
    2: java.util.AbstractMap.<init>: 0,36% (129 inclusive)
      3: java.util.HashMap.<init>: 0,36% (129 inclusive)
        4: parser.NestedMemo.set: 0,36% (129 inclusive)
  1: parser.ParseData.<init>: 42,94% (15262 inclusive)
    2: parser.Matcher.parse: 42,94% (15262 inclusive)
      3: parser.NestedMemo.get: 16,59% (5897 inclusive)
  1: parser.Matcher.parse: 42,94% (15262 inclusive)
    2: parser.NestedMemo.get: 16,59% (5897 inclusive)
  1: java.util.ArrayList.<init>: 34,88% (12400 inclusive)
    2: parser.ParseErrors.<init>: 8,6% (3057 inclusive)
      3: parser.ParseData.<init>: 8,6% (3057 inclusive)
        4: parser.Matcher.parse: 8,6% (3057 inclusive)
    2: parser.ParseData.<init>: 8,34% (2963 inclusive)
      3: parser.Matcher.parse: 8,34% (2963 inclusive)
  1: parser.ParseErrors.<init>: 18,01% (6402 inclusive)
    2: parser.ParseData.<init>: 18,01% (6402 inclusive)
      3: parser.Matcher.parse: 18,01% (6402 inclusive)
  1: java.util.AbstractCollection.<init>: 17,95% (6380 inclusive)
    2: java.util.AbstractList.<init>: 17,95% (6380 inclusive)
      3: java.util.ArrayList.<init>: 17,95% (6380 inclusive)
  1: java.util.AbstractList.<init>: 17,95% (6380 inclusive)
    2: java.util.ArrayList.<init>: 17,95% (6380 inclusive)
  1: parser.NestedMemo.get: 17,02% (6049 inclusive)
    2: parser.Matcher.visitChild: 0,43% (152 inclusive)
  1: java.lang.Number.<init>: 9,34% (3321 inclusive)
    2: java.lang.Integer.<init>: 9,34% (3321 inclusive)
      3: java.lang.Integer.valueOf: 9,34% (3321 inclusive)
  1: java.lang.Integer.<init>: 9,34% (3321 inclusive)
    2: java.lang.Integer.valueOf: 9,34% (3321 inclusive)
  1: java.lang.Integer.valueOf: 9,34% (3321 inclusive)
  1: java.util.AbstractList$Itr.<init>: 5,27% (1875 inclusive)
    2: java.util.AbstractList.iterator: 5,27% (1875 inclusive)
  1: java.util.AbstractList.iterator: 5,27% (1875 inclusive)
  1: java.util.HashMap.addEntry: 4,73% (1681 inclusive)
    2: java.util.HashMap.put: 4,73% (1681 inclusive)
      3: parser.NestedMemo.set: 0,14% (49 inclusive)
  1: java.util.HashMap.put: 4,73% (1681 inclusive)
    2: parser.NestedMemo.set: 0,14% (49 inclusive)
  1: java.util.HashMap$Entry.<init>: 4,59% (1632 inclusive)
    2: java.util.HashMap.addEntry: 4,59% (1632 inclusive)
      3: java.util.HashMap.put: 4,59% (1632 inclusive)
  1: java.util.ArrayList.iterator: 4,3% (1529 inclusive)
    2: main.ParseOpenJDK.main: 0,01% (4 inclusive)
  1: java.util.ArrayList$Itr.<init>: 4,29% (1525 inclusive)
    2: java.util.ArrayList.iterator: 4,29% (1525 inclusive)
  1: parser.Matcher.succeed: 4,19% (1490 inclusive)
  1: parser.ParseData.succeed: 4,19% (1490 inclusive)
    2: parser.Matcher.succeed: 4,19% (1490 inclusive)
  1: parser.Match.<init>: 4,19% (1490 inclusive)
    2: parser.ParseData.succeed: 4,19% (1490 inclusive)
      3: parser.Matcher.succeed: 4,19% (1490 inclusive)
  1: java.util.Collections$UnmodifiableRandomAccessList.<init>: 4,03% (1434 inclusive)
  1: java.util.Collections$UnmodifiableCollection.<init>: 4,03% (1434 inclusive)
    2: java.util.Collections$UnmodifiableList.<init>: 4,03% (1434 inclusive)
      3: java.util.Collections$UnmodifiableRandomAccessList.<init>: 4,03% (1434 inclusive)
  1: java.util.Collections$UnmodifiableList.<init>: 4,03% (1434 inclusive)
    2: java.util.Collections$UnmodifiableRandomAccessList.<init>: 4,03% (1434 inclusive)
  1: java.lang.String.substring: 4,01% (1426 inclusive)
    2: source.SourceFileText.at: 4,01% (1426 inclusive)
  1: source.SourceFileText.at: 4,01% (1426 inclusive)
  1: java.lang.String.<init>: 4,01% (1426 inclusive)
    2: java.lang.String.substring: 4,01% (1426 inclusive)
      3: source.SourceFileText.at: 4,01% (1426 inclusive)
  1: source.SourceFileText.<init>: 1,14% (405 inclusive)
  1: parser.NestedMemo.set: 0,93% (330 inclusive)
    2: parser.NestedMemo.get: 0,43% (152 inclusive)
      3: parser.Matcher.visitChild: 0,43% (152 inclusive)
  1: util.apache.CharSequenceTranslator.translate: 0,79% (282 inclusive)
    2: source.SourceFileText.<init>: 0,79% (282 inclusive)
  1: java.lang.Character.toChars: 0,79% (282 inclusive)
    2: util.apache.CharSequenceTranslator.translate: 0,79% (282 inclusive)
      3: util.apache.CharSequenceTranslator.translate: 0,79% (282 inclusive)
        4: source.SourceFileText.<init>: 0,79% (282 inclusive)
  1: java.util.HashMap.<init>: 0,79% (281 inclusive)
    2: parser.NestedMemo.set: 0,79% (281 inclusive)
      3: parser.NestedMemo.get: 0,43% (152 inclusive)
        4: parser.Matcher.visitChild: 0,43% (152 inclusive)
  1: java.util.ArrayList.ensureCapacityInternal: 0,55% (197 inclusive)
  1: java.util.Arrays.copyOf: 0,55% (197 inclusive)
    2: java.util.ArrayList.grow: 0,55% (197 inclusive)
      3: java.util.ArrayList.ensureCapacityInternal: 0,55% (197 inclusive)
  1: java.util.ArrayList.grow: 0,55% (197 inclusive)
    2: java.util.ArrayList.ensureCapacityInternal: 0,55% (197 inclusive)
  1: java.io.FileInputStream.open: 0,52% (184 inclusive)
    2: java.io.FileInputStream.<init>: 0,52% (184 inclusive)
      3: source.SourceFileText.<init>: 0,33% (119 inclusive)
        4: source.SourceFileText.<init>: 0,33% (119 inclusive)
      3: sun.misc.URLClassPath$FileLoader$1.getInputStream: 0,18% (65 inclusive)
        4: sun.misc.Resource.cachedInputStream: 0,18% (65 inclusive)
  1: java.io.FileInputStream.<init>: 0,52% (184 inclusive)
    2: source.SourceFileText.<init>: 0,33% (119 inclusive)
      3: source.SourceFileText.<init>: 0,33% (119 inclusive)
    2: sun.misc.URLClassPath$FileLoader$1.getInputStream: 0,18% (65 inclusive)
      3: sun.misc.Resource.cachedInputStream: 0,18% (65 inclusive)
  1: parser.Matcher.visitChild: 0,43% (152 inclusive)
  1: java.util.AbstractMap.<init>: 0,36% (129 inclusive)
    2: java.util.HashMap.<init>: 0,36% (129 inclusive)
      3: parser.NestedMemo.set: 0,36% (129 inclusive)
  1: sun.misc.URLClassPath$FileLoader$1.getInputStream: 0,18% (65 inclusive)
    2: sun.misc.Resource.cachedInputStream: 0,18% (65 inclusive)
  1: sun.misc.Resource.cachedInputStream: 0,18% (65 inclusive)
  1: java.io.File.exists: 0,16% (57 inclusive)
    2: sun.misc.URLClassPath$FileLoader.getResource: 0,15% (53 inclusive)
      3: sun.misc.URLClassPath.getResource: 0,15% (53 inclusive)
    2: sun.misc.PostVMInitHook.trackJavaUsage: 0,01% (4 inclusive)
      3: sun.misc.PostVMInitHook.run: 0,01% (4 inclusive)
  1: java.io.WinNTFileSystem.getBooleanAttributes: 0,16% (57 inclusive)
    2: java.io.File.exists: 0,16% (57 inclusive)
      3: sun.misc.URLClassPath$FileLoader.getResource: 0,15% (53 inclusive)
        4: sun.misc.URLClassPath.getResource: 0,15% (53 inclusive)
      3: sun.misc.PostVMInitHook.trackJavaUsage: 0,01% (4 inclusive)
        4: sun.misc.PostVMInitHook.run: 0,01% (4 inclusive)
  1: sun.misc.URLClassPath.getResource: 0,15% (53 inclusive)
  1: sun.misc.URLClassPath$FileLoader.getResource: 0,15% (53 inclusive)
    2: sun.misc.URLClassPath.getResource: 0,15% (53 inclusive)
  1: java.util.HashMap.resize: 0,14% (49 inclusive)
    2: java.util.HashMap.addEntry: 0,14% (49 inclusive)
      3: java.util.HashMap.put: 0,14% (49 inclusive)
        4: parser.NestedMemo.set: 0,14% (49 inclusive)
  1: sun.misc.Resource.getBytes: 0,14% (48 inclusive)
  1: java.lang.ClassLoader.findBootstrapClass: 0,11% (40 inclusive)
    2: java.lang.ClassLoader.findBootstrapClassOrNull: 0,11% (40 inclusive)
      3: java.lang.ClassLoader.loadClass: 0,11% (40 inclusive)
        4: java.lang.ClassLoader.loadClass: 0,11% (40 inclusive)
  1: java.lang.ClassLoader.findBootstrapClassOrNull: 0,11% (40 inclusive)
    2: java.lang.ClassLoader.loadClass: 0,11% (40 inclusive)
      3: java.lang.ClassLoader.loadClass: 0,11% (40 inclusive)
  1: java.util.zip.ZipFile.access$1400: 0,11% (40 inclusive)
    2: java.util.zip.ZipFile$ZipFileInputStream.read: 0,11% (40 inclusive)
      3: sun.misc.Resource.getBytes: 0,11% (40 inclusive)
  1: java.util.zip.ZipFile$ZipFileInputStream.read: 0,11% (40 inclusive)
    2: sun.misc.Resource.getBytes: 0,11% (40 inclusive)
  1: java.lang.ClassLoader.loadClass: 0,11% (40 inclusive)
  1: java.util.zip.ZipFile.read: 0,11% (40 inclusive)
    2: java.util.zip.ZipFile.access$1400: 0,11% (40 inclusive)
      3: java.util.zip.ZipFile$ZipFileInputStream.read: 0,11% (40 inclusive)
        4: sun.misc.Resource.getBytes: 0,11% (40 inclusive)
  1: sun.nio.fs.WindowsDirectoryStream.<init>: 0,06% (21 inclusive)
    2: sun.nio.fs.WindowsFileSystemProvider.newDirectoryStream: 0,06% (21 inclusive)
  1: sun.nio.fs.WindowsNativeDispatcher.FindFirstFile: 0,06% (21 inclusive)
    2: sun.nio.fs.WindowsDirectoryStream.<init>: 0,06% (21 inclusive)
      3: sun.nio.fs.WindowsFileSystemProvider.newDirectoryStream: 0,06% (21 inclusive)
  1: sun.nio.fs.WindowsNativeDispatcher.FindFirstFile0: 0,06% (21 inclusive)
    2: sun.nio.fs.WindowsNativeDispatcher.FindFirstFile: 0,06% (21 inclusive)
      3: sun.nio.fs.WindowsDirectoryStream.<init>: 0,06% (21 inclusive)
        4: sun.nio.fs.WindowsFileSystemProvider.newDirectoryStream: 0,06% (21 inclusive)
  1: sun.nio.fs.WindowsFileSystemProvider.newDirectoryStream: 0,06% (21 inclusive)
  1: java.lang.reflect.Field.getFieldAccessor: 0,05% (16 inclusive)
    2: java.lang.reflect.Field.get: 0,02% (6 inclusive)
  1: sun.reflect.ReflectionFactory.newFieldAccessor: 0,05% (16 inclusive)
    2: java.lang.reflect.Field.acquireFieldAccessor: 0,05% (16 inclusive)
      3: java.lang.reflect.Field.getFieldAccessor: 0,05% (16 inclusive)
        4: java.lang.reflect.Field.get: 0,02% (6 inclusive)
  1: java.lang.reflect.Field.acquireFieldAccessor: 0,05% (16 inclusive)
    2: java.lang.reflect.Field.getFieldAccessor: 0,05% (16 inclusive)
      3: java.lang.reflect.Field.get: 0,02% (6 inclusive)
  1: sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor: 0,03% (10 inclusive)
    2: sun.reflect.ReflectionFactory.newFieldAccessor: 0,03% (10 inclusive)
      3: java.lang.reflect.Field.acquireFieldAccessor: 0,03% (10 inclusive)
        4: java.lang.reflect.Field.getFieldAccessor: 0,03% (10 inclusive)
  1: java.util.zip.ZipFile.open: 0,02% (8 inclusive)
    2: java.util.zip.ZipFile.<init>: 0,02% (8 inclusive)
      3: java.util.zip.ZipFile.<init>: 0,02% (8 inclusive)
        4: java.util.jar.JarFile.<init>: 0,02% (8 inclusive)
  1: java.io.File.length: 0,02% (8 inclusive)
    2: sun.misc.URLClassPath$FileLoader$1.getContentLength: 0,02% (8 inclusive)
      3: sun.misc.Resource.getBytes: 0,02% (8 inclusive)
  1: java.util.jar.JarFile.<init>: 0,02% (8 inclusive)
  1: java.util.zip.ZipFile.<init>: 0,02% (8 inclusive)
    2: java.util.jar.JarFile.<init>: 0,02% (8 inclusive)
  1: java.io.WinNTFileSystem.getLength: 0,02% (8 inclusive)
    2: java.io.File.length: 0,02% (8 inclusive)
      3: sun.misc.URLClassPath$FileLoader$1.getContentLength: 0,02% (8 inclusive)
        4: sun.misc.Resource.getBytes: 0,02% (8 inclusive)
  1: sun.misc.URLClassPath$FileLoader$1.getContentLength: 0,02% (8 inclusive)
    2: sun.misc.Resource.getBytes: 0,02% (8 inclusive)
  1: java.lang.reflect.Field.get: 0,02% (6 inclusive)
  1: java.lang.Runtime.loadLibrary0: 0,01% (5 inclusive)
  1: java.lang.ClassLoader.loadLibrary0: 0,01% (5 inclusive)
    2: java.lang.ClassLoader.loadLibrary: 0,01% (5 inclusive)
      3: java.lang.Runtime.loadLibrary0: 0,01% (5 inclusive)
  1: java.lang.ClassLoader.loadLibrary: 0,01% (5 inclusive)
    2: java.lang.Runtime.loadLibrary0: 0,01% (5 inclusive)
  1: java.lang.ClassLoader$NativeLibrary.load: 0,01% (5 inclusive)
    2: java.lang.ClassLoader.loadLibrary0: 0,01% (5 inclusive)
      3: java.lang.ClassLoader.loadLibrary: 0,01% (5 inclusive)
        4: java.lang.Runtime.loadLibrary0: 0,01% (5 inclusive)
  1: java.util.zip.ZipFile.getEntry: 0,01% (5 inclusive)
    2: java.util.jar.JarFile.getEntry: 0,01% (5 inclusive)
      3: java.util.jar.JarFile.getJarEntry: 0,01% (5 inclusive)
  1: java.util.jar.JarFile.getJarEntry: 0,01% (5 inclusive)
  1: java.util.jar.JarFile.getEntry: 0,01% (5 inclusive)
    2: java.util.jar.JarFile.getJarEntry: 0,01% (5 inclusive)
  1: sun.nio.ch.FileChannelImpl.map: 0,01% (4 inclusive)
    2: source.SourceFileText.<init>: 0,01% (4 inclusive)
      3: source.SourceFileText.<init>: 0,01% (4 inclusive)
  1: sun.misc.PostVMInitHook.trackJavaUsage: 0,01% (4 inclusive)
    2: sun.misc.PostVMInitHook.run: 0,01% (4 inclusive)
  1: sun.misc.PostVMInitHook.run: 0,01% (4 inclusive)
  1: sun.nio.ch.FileChannelImpl.map0: 0,01% (4 inclusive)
    2: sun.nio.ch.FileChannelImpl.map: 0,01% (4 inclusive)
      3: source.SourceFileText.<init>: 0,01% (4 inclusive)
        4: source.SourceFileText.<init>: 0,01% (4 inclusive)
  1: main.ParseOpenJDK.main: 0,01% (4 inclusive)

Method Times by Line Number (times exclusive): 35546 ticks
  1: java.lang.Object.<init>: 80,05% (28454 exclusive)
    2: (Object.java:37): 80,05% (28454 exclusive)
  1: java.util.ArrayList.<init>: 16,94% (6020 exclusive)
    2: (ArrayList.java:132): 16,94% (6020 exclusive)
    2: (ArrayList.java:128): 0% (0 exclusive)
    2: (ArrayList.java:139): 0% (0 exclusive)
  1: java.lang.Character.toChars: 0,79% (282 exclusive)
    2: (Character.java:4976): 0,79% (282 exclusive)
  1: java.util.Arrays.copyOf: 0,55% (197 exclusive)
    2: (Arrays.java:2245): 0,55% (197 exclusive)
    2: (Arrays.java:2219): 0% (0 exclusive)
  1: java.io.FileInputStream.open: 0,52% (184 exclusive)
    2: (FileInputStream.java:Unknown line): 0,52% (184 exclusive)
  1: java.util.HashMap.<init>: 0,43% (152 exclusive)
    2: (HashMap.java:226): 0,43% (152 exclusive)
    2: (HashMap.java:223): 0% (0 exclusive)
  1: java.io.WinNTFileSystem.getBooleanAttributes: 0,16% (57 exclusive)
    2: (WinNTFileSystem.java:Unknown line): 0,16% (57 exclusive)
  1: java.util.HashMap.resize: 0,14% (49 exclusive)
    2: (HashMap.java:477): 0,14% (49 exclusive)
  1: java.lang.ClassLoader.findBootstrapClass: 0,11% (40 exclusive)
    2: (ClassLoader.java:Unknown line): 0,11% (40 exclusive)
  1: java.util.zip.ZipFile.read: 0,11% (40 exclusive)
    2: (ZipFile.java:Unknown line): 0,11% (40 exclusive)
  1: sun.nio.fs.WindowsNativeDispatcher.FindFirstFile0: 0,06% (21 exclusive)
    2: (WindowsNativeDispatcher.java:Unknown line): 0,06% (21 exclusive)
  1: sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor: 0,03% (10 exclusive)
    2: (UnsafeFieldAccessorFactory.java:125): 0,03% (10 exclusive)
  1: java.util.zip.ZipFile.open: 0,02% (8 exclusive)
    2: (ZipFile.java:Unknown line): 0,02% (8 exclusive)
  1: java.io.WinNTFileSystem.getLength: 0,02% (8 exclusive)
    2: (WinNTFileSystem.java:Unknown line): 0,02% (8 exclusive)
  1: sun.reflect.ReflectionFactory.newFieldAccessor: 0,02% (6 exclusive)
    2: (ReflectionFactory.java:140): 0,02% (6 exclusive)
  1: java.lang.ClassLoader$NativeLibrary.load: 0,01% (5 exclusive)
    2: (ClassLoader.java:Unknown line): 0,01% (5 exclusive)
  1: java.util.zip.ZipFile.getEntry: 0,01% (5 exclusive)
    2: (ZipFile.java:Unknown line): 0,01% (5 exclusive)
    2: (ZipFile.java:304): 0% (0 exclusive)
  1: sun.nio.ch.FileChannelImpl.map0: 0,01% (4 exclusive)
    2: (FileChannelImpl.java:Unknown line): 0,01% (4 exclusive)
  1: java.util.ArrayList.iterator: 0,01% (4 exclusive)
    2: (ArrayList.java:774): 0,01% (4 exclusive)
  1: java.util.AbstractCollection.<init>: 0% (0 exclusive)
    2: (AbstractCollection.java:66): 0% (0 exclusive)
  1: java.lang.Number.<init>: 0% (0 exclusive)
    2: (Number.java:49): 0% (0 exclusive)
  1: sun.nio.fs.WindowsDirectoryStream.<init>: 0% (0 exclusive)
    2: (WindowsDirectoryStream.java:78): 0% (0 exclusive)
  1: parser.Matcher.succeed: 0% (0 exclusive)
    2: (Matcher.java:160): 0% (0 exclusive)
  1: java.util.Collections$UnmodifiableRandomAccessList.<init>: 0% (0 exclusive)
    2: (Collections.java:1282): 0% (0 exclusive)
  1: java.util.AbstractMap.<init>: 0% (0 exclusive)
    2: (AbstractMap.java:73): 0% (0 exclusive)
  1: java.lang.Runtime.loadLibrary0: 0% (0 exclusive)
    2: (Runtime.java:845): 0% (0 exclusive)
  1: java.io.File.length: 0% (0 exclusive)
    2: (File.java:912): 0% (0 exclusive)
  1: java.util.ArrayList.ensureCapacityInternal: 0% (0 exclusive)
    2: (ArrayList.java:187): 0% (0 exclusive)
  1: parser.ParseData.succeed: 0% (0 exclusive)
    2: (ParseData.java:83): 0% (0 exclusive)
  1: parser.NestedMemo.get: 0% (0 exclusive)
    2: (NestedMemo.java:33): 0% (0 exclusive)
    2: (NestedMemo.java:41): 0% (0 exclusive)
    2: (NestedMemo.java:42): 0% (0 exclusive)
  1: java.lang.ClassLoader.loadLibrary0: 0% (0 exclusive)
    2: (ClassLoader.java:1928): 0% (0 exclusive)
  1: java.lang.ClassLoader.loadLibrary: 0% (0 exclusive)
    2: (ClassLoader.java:1846): 0% (0 exclusive)
  1: java.util.Collections$UnmodifiableCollection.<init>: 0% (0 exclusive)
    2: (Collections.java:1049): 0% (0 exclusive)
  1: java.lang.String.substring: 0% (0 exclusive)
    2: (String.java:1960): 0% (0 exclusive)
  1: sun.nio.ch.FileChannelImpl.map: 0% (0 exclusive)
    2: (FileChannelImpl.java:835): 0% (0 exclusive)
  1: java.util.AbstractList$Itr.<init>: 0% (0 exclusive)
    2: (AbstractList.java:330): 0% (0 exclusive)
  1: parser.Matcher.visitChild: 0% (0 exclusive)
    2: (Matcher.java:149): 0% (0 exclusive)
  1: sun.misc.PostVMInitHook.trackJavaUsage: 0% (0 exclusive)
    2: (PostVMInitHook.java:42): 0% (0 exclusive)
  1: sun.misc.PostVMInitHook.run: 0% (0 exclusive)
    2: (PostVMInitHook.java:22): 0% (0 exclusive)
  1: java.lang.reflect.Field.getFieldAccessor: 0% (0 exclusive)
    2: (Field.java:930): 0% (0 exclusive)
  1: java.lang.Integer.<init>: 0% (0 exclusive)
    2: (Integer.java:659): 0% (0 exclusive)
  1: parser.Match.<init>: 0% (0 exclusive)
    2: (Match.java:87): 0% (0 exclusive)
  1: parser.ParseErrors.<init>: 0% (0 exclusive)
    2: (ParseErrors.java:81): 0% (0 exclusive)
    2: (ParseErrors.java:89): 0% (0 exclusive)
  1: java.util.jar.JarFile.<init>: 0% (0 exclusive)
    2: (JarFile.java:152): 0% (0 exclusive)
  1: java.util.zip.ZipFile.<init>: 0% (0 exclusive)
    2: (ZipFile.java:144): 0% (0 exclusive)
    2: (ZipFile.java:214): 0% (0 exclusive)
  1: parser.NestedMemo.set: 0% (0 exclusive)
    2: (NestedMemo.java:56): 0% (0 exclusive)
    2: (NestedMemo.java:60): 0% (0 exclusive)
  1: parser.ParseData.<init>: 0% (0 exclusive)
    2: (ParseData.java:38): 0% (0 exclusive)
    2: (ParseData.java:44): 0% (0 exclusive)
    2: (ParseData.java:47): 0% (0 exclusive)
  1: java.util.AbstractList.iterator: 0% (0 exclusive)
    2: (AbstractList.java:288): 0% (0 exclusive)
  1: java.lang.ClassLoader.findBootstrapClassOrNull: 0% (0 exclusive)
    2: (ClassLoader.java:1061): 0% (0 exclusive)
  1: source.SourceFileText.at: 0% (0 exclusive)
    2: (SourceFileText.java:143): 0% (0 exclusive)
  1: util.apache.CharSequenceTranslator.translate: 0% (0 exclusive)
    2: (CharSequenceTranslator.java:59): 0% (0 exclusive)
    2: (CharSequenceTranslator.java:87): 0% (0 exclusive)
  1: sun.nio.fs.WindowsNativeDispatcher.FindFirstFile: 0% (0 exclusive)
    2: (WindowsNativeDispatcher.java:174): 0% (0 exclusive)
  1: java.util.HashMap.addEntry: 0% (0 exclusive)
    2: (HashMap.java:766): 0% (0 exclusive)
    2: (HashMap.java:768): 0% (0 exclusive)
  1: java.util.HashMap.put: 0% (0 exclusive)
    2: (HashMap.java:402): 0% (0 exclusive)
  1: source.SourceFileText.<init>: 0% (0 exclusive)
    2: (SourceFileText.java:107): 0% (0 exclusive)
    2: (SourceFileText.java:112): 0% (0 exclusive)
    2: (SourceFileText.java:118): 0% (0 exclusive)
    2: (SourceFileText.java:99): 0% (0 exclusive)
  1: java.util.zip.ZipFile.access$1400: 0% (0 exclusive)
    2: (ZipFile.java:56): 0% (0 exclusive)
  1: java.util.zip.ZipFile$ZipFileInputStream.read: 0% (0 exclusive)
    2: (ZipFile.java:677): 0% (0 exclusive)
  1: java.util.ArrayList.grow: 0% (0 exclusive)
    2: (ArrayList.java:213): 0% (0 exclusive)
  1: java.util.ArrayList$Itr.<init>: 0% (0 exclusive)
    2: (ArrayList.java:780): 0% (0 exclusive)
  1: sun.misc.URLClassPath$FileLoader$1.getInputStream: 0% (0 exclusive)
    2: (URLClassPath.java:1063): 0% (0 exclusive)
  1: sun.misc.Resource.getBytes: 0% (0 exclusive)
    2: (Resource.java:100): 0% (0 exclusive)
    2: (Resource.java:124): 0% (0 exclusive)
  1: java.io.File.exists: 0% (0 exclusive)
    2: (File.java:772): 0% (0 exclusive)
  1: java.lang.String.<init>: 0% (0 exclusive)
    2: (String.java:645): 0% (0 exclusive)
  1: sun.misc.URLClassPath$FileLoader$1.getContentLength: 0% (0 exclusive)
    2: (URLClassPath.java:1065): 0% (0 exclusive)
  1: java.util.HashMap$Entry.<init>: 0% (0 exclusive)
    2: (HashMap.java:696): 0% (0 exclusive)
  1: sun.misc.URLClassPath.getResource: 0% (0 exclusive)
    2: (URLClassPath.java:195): 0% (0 exclusive)
  1: java.lang.ClassLoader.loadClass: 0% (0 exclusive)
    2: (ClassLoader.java:410): 0% (0 exclusive)
    2: (ClassLoader.java:412): 0% (0 exclusive)
  1: parser.Matcher.parse: 0% (0 exclusive)
    2: (Matcher.java:133): 0% (0 exclusive)
  1: java.lang.Integer.valueOf: 0% (0 exclusive)
    2: (Integer.java:642): 0% (0 exclusive)
  1: java.util.jar.JarFile.getJarEntry: 0% (0 exclusive)
    2: (JarFile.java:208): 0% (0 exclusive)
  1: sun.misc.URLClassPath$FileLoader.getResource: 0% (0 exclusive)
    2: (URLClassPath.java:1057): 0% (0 exclusive)
  1: sun.misc.Resource.cachedInputStream: 0% (0 exclusive)
    2: (Resource.java:77): 0% (0 exclusive)
  1: sun.nio.fs.WindowsFileSystemProvider.newDirectoryStream: 0% (0 exclusive)
    2: (WindowsFileSystemProvider.java:526): 0% (0 exclusive)
  1: main.ParseOpenJDK.main: 0% (0 exclusive)
    2: (ParseOpenJDK.java:46): 0% (0 exclusive)
  1: java.lang.reflect.Field.get: 0% (0 exclusive)
    2: (Field.java:372): 0% (0 exclusive)
  1: java.lang.reflect.Field.acquireFieldAccessor: 0% (0 exclusive)
    2: (Field.java:949): 0% (0 exclusive)
  1: java.util.AbstractList.<init>: 0% (0 exclusive)
    2: (AbstractList.java:76): 0% (0 exclusive)
  1: java.io.FileInputStream.<init>: 0% (0 exclusive)
    2: (FileInputStream.java:138): 0% (0 exclusive)
  1: java.util.jar.JarFile.getEntry: 0% (0 exclusive)
    2: (JarFile.java:225): 0% (0 exclusive)
  1: java.util.Collections$UnmodifiableList.<init>: 0% (0 exclusive)
    2: (Collections.java:1204): 0% (0 exclusive)
