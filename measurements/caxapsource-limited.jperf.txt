Method Times by Caller (times inclusive): 32757 ticks
  1: java.lang.Object.<init>: 79,91% (26177 inclusive / 26177 exclusive)
  1: parser.ParseData.<init>: 46,49% (15229 inclusive / 0 exclusive)
    2: parser.ParseErrors.<init>: 19,16% (6276 inclusive / 0 exclusive)
      3: java.lang.Object.<init>: 10,07% (3300 inclusive / 3300 exclusive)
      3: java.util.ArrayList.<init>: 9,09% (2976 inclusive / 2976 exclusive)
    2: java.lang.Object.<init>: 18,52% (6065 inclusive / 6065 exclusive)
    2: java.util.ArrayList.<init>: 8,82% (2888 inclusive / 0 exclusive)
      3: java.util.ArrayList.<init>: 8,82% (2888 inclusive / 2888 exclusive)
  1: parser.Matcher.parse: 46,49% (15229 inclusive / 0 exclusive)
    2: parser.ParseData.<init>: 46,49% (15229 inclusive / 0 exclusive)
      3: parser.ParseErrors.<init>: 19,16% (6276 inclusive / 0 exclusive)
        4: java.lang.Object.<init>: 10,07% (3300 inclusive / 3300 exclusive)
        4: java.util.ArrayList.<init>: 9,09% (2976 inclusive / 2976 exclusive)
      3: java.lang.Object.<init>: 18,52% (6065 inclusive / 6065 exclusive)
      3: java.util.ArrayList.<init>: 8,82% (2888 inclusive / 0 exclusive)
        4: java.util.ArrayList.<init>: 8,82% (2888 inclusive / 2888 exclusive)
  1: java.util.ArrayList.<init>: 36,47% (11947 inclusive / 5864 exclusive)
    2: java.util.AbstractList.<init>: 18,57% (6083 inclusive / 0 exclusive)
      3: java.util.AbstractCollection.<init>: 18,57% (6083 inclusive / 0 exclusive)
        4: java.lang.Object.<init>: 18,57% (6083 inclusive / 6083 exclusive)
  1: parser.ParseErrors.<init>: 19,16% (6276 inclusive / 0 exclusive)
    2: java.lang.Object.<init>: 10,07% (3300 inclusive / 3300 exclusive)
    2: java.util.ArrayList.<init>: 9,09% (2976 inclusive / 2976 exclusive)
  1: parser.LimitedMemo.get: 18,72% (6131 inclusive / 0 exclusive)
    2: parser.Matcher.parse: 18,52% (6065 inclusive / 0 exclusive)
      3: parser.ParseData.<init>: 18,52% (6065 inclusive / 0 exclusive)
        4: java.lang.Object.<init>: 18,52% (6065 inclusive / 6065 exclusive)
    2: parser.LimitedMemo$Memoed.<init>: 0,2% (66 inclusive / 0 exclusive)
      3: parser.LimitedMemo$Memoed.<init>: 0,2% (66 inclusive / 41 exclusive)
        4: java.lang.Object.<init>: 0,08% (25 inclusive / 25 exclusive)
  1: java.util.AbstractCollection.<init>: 18,57% (6083 inclusive / 0 exclusive)
    2: java.lang.Object.<init>: 18,57% (6083 inclusive / 6083 exclusive)
  1: java.util.AbstractList.<init>: 18,57% (6083 inclusive / 0 exclusive)
    2: java.util.AbstractCollection.<init>: 18,57% (6083 inclusive / 0 exclusive)
      3: java.lang.Object.<init>: 18,57% (6083 inclusive / 6083 exclusive)
  1: java.lang.Number.<init>: 9,79% (3208 inclusive / 0 exclusive)
    2: java.lang.Object.<init>: 9,79% (3208 inclusive / 3208 exclusive)
  1: java.lang.Integer.<init>: 9,79% (3208 inclusive / 0 exclusive)
    2: java.lang.Number.<init>: 9,79% (3208 inclusive / 0 exclusive)
      3: java.lang.Object.<init>: 9,79% (3208 inclusive / 3208 exclusive)
  1: java.lang.Integer.valueOf: 9,79% (3208 inclusive / 0 exclusive)
    2: java.lang.Integer.<init>: 9,79% (3208 inclusive / 0 exclusive)
      3: java.lang.Number.<init>: 9,79% (3208 inclusive / 0 exclusive)
        4: java.lang.Object.<init>: 9,79% (3208 inclusive / 3208 exclusive)
  1: java.util.AbstractList$Itr.<init>: 5,48% (1795 inclusive / 0 exclusive)
    2: java.lang.Object.<init>: 5,48% (1795 inclusive / 1795 exclusive)
  1: java.util.AbstractList.iterator: 5,48% (1795 inclusive / 0 exclusive)
    2: java.util.AbstractList$Itr.<init>: 5,48% (1795 inclusive / 0 exclusive)
      3: java.util.AbstractList$Itr.<init>: 5,48% (1795 inclusive / 0 exclusive)
        4: java.lang.Object.<init>: 5,48% (1795 inclusive / 1795 exclusive)
  1: java.util.ArrayList.iterator: 4,57% (1498 inclusive / 0 exclusive)
    2: java.util.ArrayList$Itr.<init>: 4,57% (1498 inclusive / 0 exclusive)
      3: java.util.ArrayList$Itr.<init>: 4,57% (1498 inclusive / 0 exclusive)
        4: java.lang.Object.<init>: 4,57% (1498 inclusive / 1498 exclusive)
  1: java.util.ArrayList$Itr.<init>: 4,57% (1498 inclusive / 0 exclusive)
    2: java.lang.Object.<init>: 4,57% (1498 inclusive / 1498 exclusive)
  1: parser.Matcher.succeed: 4,37% (1431 inclusive / 0 exclusive)
    2: parser.ParseData.succeed: 4,37% (1431 inclusive / 0 exclusive)
      3: parser.Match.<init>: 4,37% (1431 inclusive / 0 exclusive)
        4: java.lang.Object.<init>: 4,37% (1431 inclusive / 1431 exclusive)
  1: parser.ParseData.succeed: 4,37% (1431 inclusive / 0 exclusive)
    2: parser.Match.<init>: 4,37% (1431 inclusive / 0 exclusive)
      3: java.lang.Object.<init>: 4,37% (1431 inclusive / 1431 exclusive)
  1: parser.Match.<init>: 4,37% (1431 inclusive / 0 exclusive)
    2: java.lang.Object.<init>: 4,37% (1431 inclusive / 1431 exclusive)
  1: java.lang.String.substring: 4,21% (1380 inclusive / 0 exclusive)
    2: java.lang.String.<init>: 4,21% (1380 inclusive / 0 exclusive)
      3: java.lang.Object.<init>: 4,21% (1380 inclusive / 1380 exclusive)
  1: source.SourceFileText.at: 4,21% (1380 inclusive / 0 exclusive)
    2: java.lang.String.substring: 4,21% (1380 inclusive / 0 exclusive)
      3: java.lang.String.<init>: 4,21% (1380 inclusive / 0 exclusive)
        4: java.lang.Object.<init>: 4,21% (1380 inclusive / 1380 exclusive)
  1: java.lang.String.<init>: 4,21% (1380 inclusive / 0 exclusive)
    2: java.lang.Object.<init>: 4,21% (1380 inclusive / 1380 exclusive)
  1: java.util.Collections$UnmodifiableRandomAccessList.<init>: 4,19% (1374 inclusive / 0 exclusive)
    2: java.util.Collections$UnmodifiableList.<init>: 4,19% (1374 inclusive / 0 exclusive)
      3: java.util.Collections$UnmodifiableCollection.<init>: 4,19% (1374 inclusive / 0 exclusive)
        4: java.lang.Object.<init>: 4,19% (1374 inclusive / 1374 exclusive)
  1: java.util.Collections$UnmodifiableCollection.<init>: 4,19% (1374 inclusive / 0 exclusive)
    2: java.lang.Object.<init>: 4,19% (1374 inclusive / 1374 exclusive)
  1: java.util.Collections$UnmodifiableList.<init>: 4,19% (1374 inclusive / 0 exclusive)
    2: java.util.Collections$UnmodifiableCollection.<init>: 4,19% (1374 inclusive / 0 exclusive)
      3: java.lang.Object.<init>: 4,19% (1374 inclusive / 1374 exclusive)
  1: source.SourceFileText.<init>: 1,22% (399 inclusive / 0 exclusive)
    2: util.apache.CharSequenceTranslator.translate: 0,82% (269 inclusive / 0 exclusive)
      3: util.apache.CharSequenceTranslator.translate: 0,82% (269 inclusive / 0 exclusive)
        4: java.lang.Character.toChars: 0,82% (269 inclusive / 269 exclusive)
    2: java.io.FileInputStream.<init>: 0,36% (119 inclusive / 0 exclusive)
      3: java.io.FileInputStream.open: 0,36% (119 inclusive / 119 exclusive)
    2: sun.nio.ch.FileChannelImpl.map: 0,03% (11 inclusive / 0 exclusive)
      3: sun.nio.ch.FileChannelImpl.map0: 0,03% (11 inclusive / 11 exclusive)
  1: util.apache.CharSequenceTranslator.translate: 0,82% (269 inclusive / 0 exclusive)
    2: java.lang.Character.toChars: 0,82% (269 inclusive / 269 exclusive)
  1: java.lang.Character.toChars: 0,82% (269 inclusive / 269 exclusive)
  1: java.util.ArrayList.ensureCapacityInternal: 0,56% (182 inclusive / 0 exclusive)
    2: java.util.ArrayList.grow: 0,56% (182 inclusive / 0 exclusive)
      3: java.util.Arrays.copyOf: 0,56% (182 inclusive / 0 exclusive)
        4: java.util.Arrays.copyOf: 0,56% (182 inclusive / 182 exclusive)
  1: java.util.Arrays.copyOf: 0,56% (182 inclusive / 182 exclusive)
  1: java.util.ArrayList.grow: 0,56% (182 inclusive / 0 exclusive)
    2: java.util.Arrays.copyOf: 0,56% (182 inclusive / 0 exclusive)
      3: java.util.Arrays.copyOf: 0,56% (182 inclusive / 182 exclusive)
  1: java.io.FileInputStream.open: 0,5% (163 inclusive / 163 exclusive)
  1: java.io.FileInputStream.<init>: 0,5% (163 inclusive / 0 exclusive)
    2: java.io.FileInputStream.open: 0,5% (163 inclusive / 163 exclusive)
  1: parser.LimitedMemo$Memoed.<init>: 0,2% (66 inclusive / 41 exclusive)
    2: java.lang.Object.<init>: 0,08% (25 inclusive / 25 exclusive)
  1: sun.misc.URLClassPath$FileLoader$1.getInputStream: 0,13% (44 inclusive / 0 exclusive)
    2: java.io.FileInputStream.<init>: 0,13% (44 inclusive / 0 exclusive)
      3: java.io.FileInputStream.open: 0,13% (44 inclusive / 44 exclusive)
  1: sun.misc.Resource.cachedInputStream: 0,13% (44 inclusive / 0 exclusive)
    2: sun.misc.URLClassPath$FileLoader$1.getInputStream: 0,13% (44 inclusive / 0 exclusive)
      3: java.io.FileInputStream.<init>: 0,13% (44 inclusive / 0 exclusive)
        4: java.io.FileInputStream.open: 0,13% (44 inclusive / 44 exclusive)
  1: parser.Matcher.visitChild: 0,13% (41 inclusive / 0 exclusive)
    2: parser.LimitedMemo.get: 0,13% (41 inclusive / 0 exclusive)
      3: parser.LimitedMemo$Memoed.<init>: 0,13% (41 inclusive / 0 exclusive)
        4: parser.LimitedMemo$Memoed.<init>: 0,13% (41 inclusive / 41 exclusive)
  1: java.util.HashMap.addEntry: 0,05% (18 inclusive / 0 exclusive)
    2: java.util.HashMap$Entry.<init>: 0,05% (18 inclusive / 0 exclusive)
      3: java.lang.Object.<init>: 0,05% (18 inclusive / 18 exclusive)
  1: java.util.HashMap.put: 0,05% (18 inclusive / 0 exclusive)
    2: java.util.HashMap.addEntry: 0,05% (18 inclusive / 0 exclusive)
      3: java.util.HashMap$Entry.<init>: 0,05% (18 inclusive / 0 exclusive)
        4: java.lang.Object.<init>: 0,05% (18 inclusive / 18 exclusive)
  1: java.util.HashMap$Entry.<init>: 0,05% (18 inclusive / 0 exclusive)
    2: java.lang.Object.<init>: 0,05% (18 inclusive / 18 exclusive)
  1: java.io.File.exists: 0,04% (14 inclusive / 0 exclusive)
    2: java.io.WinNTFileSystem.getBooleanAttributes: 0,04% (14 inclusive / 14 exclusive)
  1: sun.misc.URLClassPath.getResource: 0,04% (14 inclusive / 0 exclusive)
    2: sun.misc.URLClassPath$FileLoader.getResource: 0,04% (14 inclusive / 0 exclusive)
      3: java.io.File.exists: 0,04% (14 inclusive / 0 exclusive)
        4: java.io.WinNTFileSystem.getBooleanAttributes: 0,04% (14 inclusive / 14 exclusive)
  1: java.io.WinNTFileSystem.getBooleanAttributes: 0,04% (14 inclusive / 14 exclusive)
  1: sun.misc.URLClassPath$FileLoader.getResource: 0,04% (14 inclusive / 0 exclusive)
    2: java.io.File.exists: 0,04% (14 inclusive / 0 exclusive)
      3: java.io.WinNTFileSystem.getBooleanAttributes: 0,04% (14 inclusive / 14 exclusive)
  1: sun.nio.ch.FileChannelImpl.map: 0,03% (11 inclusive / 0 exclusive)
    2: sun.nio.ch.FileChannelImpl.map0: 0,03% (11 inclusive / 11 exclusive)
  1: sun.nio.ch.FileChannelImpl.map0: 0,03% (11 inclusive / 11 exclusive)
  1: sun.nio.fs.WindowsDirectoryStream.<init>: 0,03% (10 inclusive / 0 exclusive)
    2: sun.nio.fs.WindowsNativeDispatcher.FindFirstFile: 0,03% (10 inclusive / 0 exclusive)
      3: sun.nio.fs.WindowsNativeDispatcher.FindFirstFile0: 0,03% (10 inclusive / 10 exclusive)
  1: sun.nio.fs.WindowsNativeDispatcher.FindFirstFile: 0,03% (10 inclusive / 0 exclusive)
    2: sun.nio.fs.WindowsNativeDispatcher.FindFirstFile0: 0,03% (10 inclusive / 10 exclusive)
  1: sun.nio.fs.WindowsNativeDispatcher.FindFirstFile0: 0,03% (10 inclusive / 10 exclusive)
  1: sun.nio.fs.WindowsFileSystemProvider.newDirectoryStream: 0,03% (10 inclusive / 0 exclusive)
    2: sun.nio.fs.WindowsDirectoryStream.<init>: 0,03% (10 inclusive / 0 exclusive)
      3: sun.nio.fs.WindowsNativeDispatcher.FindFirstFile: 0,03% (10 inclusive / 0 exclusive)
        4: sun.nio.fs.WindowsNativeDispatcher.FindFirstFile0: 0,03% (10 inclusive / 10 exclusive)
  1: java.util.zip.ZipFile.open: 0,02% (6 inclusive / 6 exclusive)
  1: java.lang.ClassLoader.findBootstrapClass: 0,02% (6 inclusive / 6 exclusive)
  1: java.util.jar.JarFile.<init>: 0,02% (6 inclusive / 0 exclusive)
    2: java.util.zip.ZipFile.<init>: 0,02% (6 inclusive / 0 exclusive)
      3: java.util.zip.ZipFile.<init>: 0,02% (6 inclusive / 0 exclusive)
        4: java.util.zip.ZipFile.open: 0,02% (6 inclusive / 6 exclusive)
  1: java.util.zip.ZipFile.<init>: 0,02% (6 inclusive / 0 exclusive)
    2: java.util.zip.ZipFile.open: 0,02% (6 inclusive / 6 exclusive)
  1: java.lang.ClassLoader.findBootstrapClassOrNull: 0,02% (6 inclusive / 0 exclusive)
    2: java.lang.ClassLoader.findBootstrapClass: 0,02% (6 inclusive / 6 exclusive)
  1: java.lang.ClassLoader.loadClass: 0,02% (6 inclusive / 0 exclusive)
    2: java.lang.ClassLoader.findBootstrapClassOrNull: 0,02% (6 inclusive / 0 exclusive)
      3: java.lang.ClassLoader.findBootstrapClass: 0,02% (6 inclusive / 6 exclusive)
  1: java.io.File.length: 0,02% (5 inclusive / 0 exclusive)
    2: java.io.WinNTFileSystem.getLength: 0,02% (5 inclusive / 5 exclusive)
  1: java.lang.ClassLoader.defineClass: 0,02% (5 inclusive / 0 exclusive)
    2: java.lang.ClassLoader.defineClass1: 0,02% (5 inclusive / 5 exclusive)
  1: java.lang.ClassLoader.defineClass1: 0,02% (5 inclusive / 5 exclusive)
  1: java.io.WinNTFileSystem.getLength: 0,02% (5 inclusive / 5 exclusive)
  1: sun.misc.Resource.getBytes: 0,02% (5 inclusive / 0 exclusive)
    2: sun.misc.URLClassPath$FileLoader$1.getContentLength: 0,02% (5 inclusive / 0 exclusive)
      3: java.io.File.length: 0,02% (5 inclusive / 0 exclusive)
        4: java.io.WinNTFileSystem.getLength: 0,02% (5 inclusive / 5 exclusive)
  1: sun.misc.URLClassPath$FileLoader$1.getContentLength: 0,02% (5 inclusive / 0 exclusive)
    2: java.io.File.length: 0,02% (5 inclusive / 0 exclusive)
      3: java.io.WinNTFileSystem.getLength: 0,02% (5 inclusive / 5 exclusive)
  1: java.net.URLClassLoader.defineClass: 0,02% (5 inclusive / 0 exclusive)
    2: java.security.SecureClassLoader.defineClass: 0,02% (5 inclusive / 0 exclusive)
      3: java.lang.ClassLoader.defineClass: 0,02% (5 inclusive / 0 exclusive)
        4: java.lang.ClassLoader.defineClass1: 0,02% (5 inclusive / 5 exclusive)
  1: java.security.SecureClassLoader.defineClass: 0,02% (5 inclusive / 0 exclusive)
    2: java.lang.ClassLoader.defineClass: 0,02% (5 inclusive / 0 exclusive)
      3: java.lang.ClassLoader.defineClass1: 0,02% (5 inclusive / 5 exclusive)
  1: java.lang.Runtime.loadLibrary0: 0,01% (4 inclusive / 0 exclusive)
    2: java.lang.ClassLoader.loadLibrary: 0,01% (4 inclusive / 0 exclusive)
      3: java.lang.ClassLoader.loadLibrary0: 0,01% (4 inclusive / 0 exclusive)
        4: java.lang.ClassLoader$NativeLibrary.load: 0,01% (4 inclusive / 4 exclusive)
  1: java.lang.ClassLoader.loadLibrary0: 0,01% (4 inclusive / 0 exclusive)
    2: java.lang.ClassLoader$NativeLibrary.load: 0,01% (4 inclusive / 4 exclusive)
  1: java.lang.ClassLoader.loadLibrary: 0,01% (4 inclusive / 0 exclusive)
    2: java.lang.ClassLoader.loadLibrary0: 0,01% (4 inclusive / 0 exclusive)
      3: java.lang.ClassLoader$NativeLibrary.load: 0,01% (4 inclusive / 4 exclusive)
  1: java.lang.ClassLoader$NativeLibrary.load: 0,01% (4 inclusive / 4 exclusive)

Method Times by Line Number (times inclusive): 32757 ticks
  1: java.lang.Object.<init>: 79,91% (26177 inclusive)
    2: (Object.java:37): 79,91% (26177 inclusive)
  1: parser.ParseData.<init>: 46,49% (15229 inclusive)
    2: (ParseData.java:44): 19,16% (6276 inclusive)
    2: (ParseData.java:38): 18,52% (6065 inclusive)
    2: (ParseData.java:47): 8,82% (2888 inclusive)
  1: parser.Matcher.parse: 46,49% (15229 inclusive)
    2: (Matcher.java:133): 46,49% (15229 inclusive)
  1: java.util.ArrayList.<init>: 36,47% (11947 inclusive)
    2: (ArrayList.java:128): 18,57% (6083 inclusive)
    2: (ArrayList.java:132): 17,9% (5864 inclusive)
    2: (ArrayList.java:139): 0% (0 inclusive)
  1: parser.ParseErrors.<init>: 19,16% (6276 inclusive)
    2: (ParseErrors.java:89): 10,07% (3300 inclusive)
    2: (ParseErrors.java:81): 9,09% (2976 inclusive)
  1: parser.LimitedMemo.get: 18,72% (6131 inclusive)
    2: (LimitedMemo.java:63): 13,61% (4458 inclusive)
    2: (LimitedMemo.java:76): 4,91% (1607 inclusive)
    2: (LimitedMemo.java:69): 0,2% (66 inclusive)
  1: java.util.AbstractCollection.<init>: 18,57% (6083 inclusive)
    2: (AbstractCollection.java:66): 18,57% (6083 inclusive)
  1: java.util.AbstractList.<init>: 18,57% (6083 inclusive)
    2: (AbstractList.java:76): 18,57% (6083 inclusive)
  1: java.lang.Number.<init>: 9,79% (3208 inclusive)
    2: (Number.java:49): 9,79% (3208 inclusive)
  1: java.lang.Integer.<init>: 9,79% (3208 inclusive)
    2: (Integer.java:659): 9,79% (3208 inclusive)
  1: java.lang.Integer.valueOf: 9,79% (3208 inclusive)
    2: (Integer.java:642): 9,79% (3208 inclusive)
  1: java.util.AbstractList$Itr.<init>: 5,48% (1795 inclusive)
    2: (AbstractList.java:330): 5,48% (1795 inclusive)
  1: java.util.AbstractList.iterator: 5,48% (1795 inclusive)
    2: (AbstractList.java:288): 5,48% (1795 inclusive)
  1: java.util.ArrayList.iterator: 4,57% (1498 inclusive)
    2: (ArrayList.java:774): 4,57% (1498 inclusive)
  1: java.util.ArrayList$Itr.<init>: 4,57% (1498 inclusive)
    2: (ArrayList.java:780): 4,57% (1498 inclusive)
  1: parser.Matcher.succeed: 4,37% (1431 inclusive)
    2: (Matcher.java:160): 4,37% (1431 inclusive)
  1: parser.ParseData.succeed: 4,37% (1431 inclusive)
    2: (ParseData.java:83): 4,37% (1431 inclusive)
  1: parser.Match.<init>: 4,37% (1431 inclusive)
    2: (Match.java:87): 4,37% (1431 inclusive)
  1: java.lang.String.substring: 4,21% (1380 inclusive)
    2: (String.java:1960): 4,21% (1380 inclusive)
  1: source.SourceFileText.at: 4,21% (1380 inclusive)
    2: (SourceFileText.java:143): 4,21% (1380 inclusive)
  1: java.lang.String.<init>: 4,21% (1380 inclusive)
    2: (String.java:645): 4,21% (1380 inclusive)
  1: java.util.Collections$UnmodifiableRandomAccessList.<init>: 4,19% (1374 inclusive)
    2: (Collections.java:1282): 4,19% (1374 inclusive)
  1: java.util.Collections$UnmodifiableCollection.<init>: 4,19% (1374 inclusive)
    2: (Collections.java:1049): 4,19% (1374 inclusive)
  1: java.util.Collections$UnmodifiableList.<init>: 4,19% (1374 inclusive)
    2: (Collections.java:1204): 4,19% (1374 inclusive)
  1: source.SourceFileText.<init>: 1,22% (399 inclusive)
    2: (SourceFileText.java:118): 0,82% (269 inclusive)
    2: (SourceFileText.java:107): 0,36% (119 inclusive)
    2: (SourceFileText.java:112): 0,03% (11 inclusive)
    2: (SourceFileText.java:99): 0% (0 inclusive)
  1: util.apache.CharSequenceTranslator.translate: 0,82% (269 inclusive)
    2: (CharSequenceTranslator.java:87): 0,82% (269 inclusive)
    2: (CharSequenceTranslator.java:59): 0% (0 inclusive)
  1: java.lang.Character.toChars: 0,82% (269 inclusive)
    2: (Character.java:4976): 0,82% (269 inclusive)
  1: java.util.ArrayList.ensureCapacityInternal: 0,56% (182 inclusive)
    2: (ArrayList.java:187): 0,56% (182 inclusive)
  1: java.util.Arrays.copyOf: 0,56% (182 inclusive)
    2: (Arrays.java:2245): 0,56% (182 inclusive)
    2: (Arrays.java:2219): 0% (0 inclusive)
  1: java.util.ArrayList.grow: 0,56% (182 inclusive)
    2: (ArrayList.java:213): 0,56% (182 inclusive)
  1: java.io.FileInputStream.open: 0,5% (163 inclusive)
    2: (FileInputStream.java:Unknown line): 0,5% (163 inclusive)
  1: java.io.FileInputStream.<init>: 0,5% (163 inclusive)
    2: (FileInputStream.java:138): 0,5% (163 inclusive)
  1: parser.LimitedMemo$Memoed.<init>: 0,2% (66 inclusive)
    2: (LimitedMemo.java:33): 0,08% (25 inclusive)
    2: (LimitedMemo.java:36): 0,07% (24 inclusive)
    2: (LimitedMemo.java:35): 0,05% (17 inclusive)
  1: sun.misc.URLClassPath$FileLoader$1.getInputStream: 0,13% (44 inclusive)
    2: (URLClassPath.java:1063): 0,13% (44 inclusive)
  1: sun.misc.Resource.cachedInputStream: 0,13% (44 inclusive)
    2: (Resource.java:77): 0,13% (44 inclusive)
  1: parser.Matcher.visitChild: 0,13% (41 inclusive)
    2: (Matcher.java:149): 0,13% (41 inclusive)
  1: java.util.HashMap.addEntry: 0,05% (18 inclusive)
    2: (HashMap.java:766): 0,05% (18 inclusive)
  1: java.util.HashMap.put: 0,05% (18 inclusive)
    2: (HashMap.java:402): 0,05% (18 inclusive)
  1: java.util.HashMap$Entry.<init>: 0,05% (18 inclusive)
    2: (HashMap.java:696): 0,05% (18 inclusive)
  1: java.io.File.exists: 0,04% (14 inclusive)
    2: (File.java:772): 0,04% (14 inclusive)
  1: sun.misc.URLClassPath.getResource: 0,04% (14 inclusive)
    2: (URLClassPath.java:195): 0,04% (14 inclusive)
  1: java.io.WinNTFileSystem.getBooleanAttributes: 0,04% (14 inclusive)
    2: (WinNTFileSystem.java:Unknown line): 0,04% (14 inclusive)
  1: sun.misc.URLClassPath$FileLoader.getResource: 0,04% (14 inclusive)
    2: (URLClassPath.java:1057): 0,04% (14 inclusive)
  1: sun.nio.ch.FileChannelImpl.map: 0,03% (11 inclusive)
    2: (FileChannelImpl.java:835): 0,03% (11 inclusive)
  1: sun.nio.ch.FileChannelImpl.map0: 0,03% (11 inclusive)
    2: (FileChannelImpl.java:Unknown line): 0,03% (11 inclusive)
  1: sun.nio.fs.WindowsDirectoryStream.<init>: 0,03% (10 inclusive)
    2: (WindowsDirectoryStream.java:78): 0,03% (10 inclusive)
  1: sun.nio.fs.WindowsNativeDispatcher.FindFirstFile: 0,03% (10 inclusive)
    2: (WindowsNativeDispatcher.java:174): 0,03% (10 inclusive)
  1: sun.nio.fs.WindowsNativeDispatcher.FindFirstFile0: 0,03% (10 inclusive)
    2: (WindowsNativeDispatcher.java:Unknown line): 0,03% (10 inclusive)
  1: sun.nio.fs.WindowsFileSystemProvider.newDirectoryStream: 0,03% (10 inclusive)
    2: (WindowsFileSystemProvider.java:526): 0,03% (10 inclusive)
  1: java.util.zip.ZipFile.open: 0,02% (6 inclusive)
    2: (ZipFile.java:Unknown line): 0,02% (6 inclusive)
  1: java.lang.ClassLoader.findBootstrapClass: 0,02% (6 inclusive)
    2: (ClassLoader.java:Unknown line): 0,02% (6 inclusive)
  1: java.util.jar.JarFile.<init>: 0,02% (6 inclusive)
    2: (JarFile.java:152): 0,02% (6 inclusive)
  1: java.util.zip.ZipFile.<init>: 0,02% (6 inclusive)
    2: (ZipFile.java:214): 0,02% (6 inclusive)
    2: (ZipFile.java:144): 0% (0 inclusive)
  1: java.lang.ClassLoader.findBootstrapClassOrNull: 0,02% (6 inclusive)
    2: (ClassLoader.java:1061): 0,02% (6 inclusive)
  1: java.lang.ClassLoader.loadClass: 0,02% (6 inclusive)
    2: (ClassLoader.java:412): 0,02% (6 inclusive)
    2: (ClassLoader.java:410): 0% (0 inclusive)
  1: java.io.File.length: 0,02% (5 inclusive)
    2: (File.java:912): 0,02% (5 inclusive)
  1: java.lang.ClassLoader.defineClass: 0,02% (5 inclusive)
    2: (ClassLoader.java:791): 0,02% (5 inclusive)
  1: java.lang.ClassLoader.defineClass1: 0,02% (5 inclusive)
    2: (ClassLoader.java:Unknown line): 0,02% (5 inclusive)
  1: java.io.WinNTFileSystem.getLength: 0,02% (5 inclusive)
    2: (WinNTFileSystem.java:Unknown line): 0,02% (5 inclusive)
  1: sun.misc.Resource.getBytes: 0,02% (5 inclusive)
    2: (Resource.java:100): 0,02% (5 inclusive)
  1: sun.misc.URLClassPath$FileLoader$1.getContentLength: 0,02% (5 inclusive)
    2: (URLClassPath.java:1065): 0,02% (5 inclusive)
  1: java.net.URLClassLoader.defineClass: 0,02% (5 inclusive)
    2: (URLClassLoader.java:449): 0,02% (5 inclusive)
  1: java.security.SecureClassLoader.defineClass: 0,02% (5 inclusive)
    2: (SecureClassLoader.java:142): 0,02% (5 inclusive)
  1: java.lang.Runtime.loadLibrary0: 0,01% (4 inclusive)
    2: (Runtime.java:845): 0,01% (4 inclusive)
  1: java.lang.ClassLoader.loadLibrary0: 0,01% (4 inclusive)
    2: (ClassLoader.java:1928): 0,01% (4 inclusive)
  1: java.lang.ClassLoader.loadLibrary: 0,01% (4 inclusive)
    2: (ClassLoader.java:1846): 0,01% (4 inclusive)
  1: java.lang.ClassLoader$NativeLibrary.load: 0,01% (4 inclusive)
    2: (ClassLoader.java:Unknown line): 0,01% (4 inclusive)

Method Times by Callee (times inclusive): 32757 ticks
  1: java.lang.Object.<init>: 79,91% (26177 inclusive)
    2: java.util.AbstractCollection.<init>: 18,57% (6083 inclusive)
      3: java.util.AbstractList.<init>: 18,57% (6083 inclusive)
        4: java.util.ArrayList.<init>: 18,57% (6083 inclusive)
    2: parser.ParseData.<init>: 18,52% (6065 inclusive)
      3: parser.Matcher.parse: 18,52% (6065 inclusive)
        4: parser.LimitedMemo.get: 18,52% (6065 inclusive)
    2: parser.ParseErrors.<init>: 10,07% (3300 inclusive)
      3: parser.ParseData.<init>: 10,07% (3300 inclusive)
        4: parser.Matcher.parse: 10,07% (3300 inclusive)
    2: java.lang.Number.<init>: 9,79% (3208 inclusive)
      3: java.lang.Integer.<init>: 9,79% (3208 inclusive)
        4: java.lang.Integer.valueOf: 9,79% (3208 inclusive)
    2: java.util.AbstractList$Itr.<init>: 5,48% (1795 inclusive)
      3: java.util.AbstractList$Itr.<init>: 5,48% (1795 inclusive)
        4: java.util.AbstractList.iterator: 5,48% (1795 inclusive)
    2: java.util.ArrayList$Itr.<init>: 4,57% (1498 inclusive)
      3: java.util.ArrayList$Itr.<init>: 4,57% (1498 inclusive)
        4: java.util.ArrayList.iterator: 4,57% (1498 inclusive)
    2: parser.Match.<init>: 4,37% (1431 inclusive)
      3: parser.ParseData.succeed: 4,37% (1431 inclusive)
        4: parser.Matcher.succeed: 4,37% (1431 inclusive)
    2: java.lang.String.<init>: 4,21% (1380 inclusive)
      3: java.lang.String.substring: 4,21% (1380 inclusive)
        4: source.SourceFileText.at: 4,21% (1380 inclusive)
    2: java.util.Collections$UnmodifiableCollection.<init>: 4,19% (1374 inclusive)
      3: java.util.Collections$UnmodifiableList.<init>: 4,19% (1374 inclusive)
        4: java.util.Collections$UnmodifiableRandomAccessList.<init>: 4,19% (1374 inclusive)
    2: parser.LimitedMemo$Memoed.<init>: 0,08% (25 inclusive)
      3: parser.LimitedMemo$Memoed.<init>: 0,08% (25 inclusive)
        4: parser.LimitedMemo.get: 0,08% (25 inclusive)
    2: java.util.HashMap$Entry.<init>: 0,05% (18 inclusive)
      3: java.util.HashMap.addEntry: 0,05% (18 inclusive)
        4: java.util.HashMap.put: 0,05% (18 inclusive)
  1: parser.ParseData.<init>: 46,49% (15229 inclusive)
    2: parser.Matcher.parse: 46,49% (15229 inclusive)
      3: parser.LimitedMemo.get: 18,52% (6065 inclusive)
  1: parser.Matcher.parse: 46,49% (15229 inclusive)
    2: parser.LimitedMemo.get: 18,52% (6065 inclusive)
  1: java.util.ArrayList.<init>: 36,47% (11947 inclusive)
    2: parser.ParseErrors.<init>: 9,09% (2976 inclusive)
      3: parser.ParseData.<init>: 9,09% (2976 inclusive)
        4: parser.Matcher.parse: 9,09% (2976 inclusive)
    2: parser.ParseData.<init>: 8,82% (2888 inclusive)
      3: parser.Matcher.parse: 8,82% (2888 inclusive)
  1: parser.ParseErrors.<init>: 19,16% (6276 inclusive)
    2: parser.ParseData.<init>: 19,16% (6276 inclusive)
      3: parser.Matcher.parse: 19,16% (6276 inclusive)
  1: parser.LimitedMemo.get: 18,72% (6131 inclusive)
    2: parser.Matcher.visitChild: 0,13% (41 inclusive)
  1: java.util.AbstractCollection.<init>: 18,57% (6083 inclusive)
    2: java.util.AbstractList.<init>: 18,57% (6083 inclusive)
      3: java.util.ArrayList.<init>: 18,57% (6083 inclusive)
  1: java.util.AbstractList.<init>: 18,57% (6083 inclusive)
    2: java.util.ArrayList.<init>: 18,57% (6083 inclusive)
  1: java.lang.Number.<init>: 9,79% (3208 inclusive)
    2: java.lang.Integer.<init>: 9,79% (3208 inclusive)
      3: java.lang.Integer.valueOf: 9,79% (3208 inclusive)
  1: java.lang.Integer.<init>: 9,79% (3208 inclusive)
    2: java.lang.Integer.valueOf: 9,79% (3208 inclusive)
  1: java.lang.Integer.valueOf: 9,79% (3208 inclusive)
  1: java.util.AbstractList$Itr.<init>: 5,48% (1795 inclusive)
    2: java.util.AbstractList.iterator: 5,48% (1795 inclusive)
  1: java.util.AbstractList.iterator: 5,48% (1795 inclusive)
  1: java.util.ArrayList.iterator: 4,57% (1498 inclusive)
  1: java.util.ArrayList$Itr.<init>: 4,57% (1498 inclusive)
    2: java.util.ArrayList.iterator: 4,57% (1498 inclusive)
  1: parser.Matcher.succeed: 4,37% (1431 inclusive)
  1: parser.ParseData.succeed: 4,37% (1431 inclusive)
    2: parser.Matcher.succeed: 4,37% (1431 inclusive)
  1: parser.Match.<init>: 4,37% (1431 inclusive)
    2: parser.ParseData.succeed: 4,37% (1431 inclusive)
      3: parser.Matcher.succeed: 4,37% (1431 inclusive)
  1: java.lang.String.substring: 4,21% (1380 inclusive)
    2: source.SourceFileText.at: 4,21% (1380 inclusive)
  1: source.SourceFileText.at: 4,21% (1380 inclusive)
  1: java.lang.String.<init>: 4,21% (1380 inclusive)
    2: java.lang.String.substring: 4,21% (1380 inclusive)
      3: source.SourceFileText.at: 4,21% (1380 inclusive)
  1: java.util.Collections$UnmodifiableRandomAccessList.<init>: 4,19% (1374 inclusive)
  1: java.util.Collections$UnmodifiableCollection.<init>: 4,19% (1374 inclusive)
    2: java.util.Collections$UnmodifiableList.<init>: 4,19% (1374 inclusive)
      3: java.util.Collections$UnmodifiableRandomAccessList.<init>: 4,19% (1374 inclusive)
  1: java.util.Collections$UnmodifiableList.<init>: 4,19% (1374 inclusive)
    2: java.util.Collections$UnmodifiableRandomAccessList.<init>: 4,19% (1374 inclusive)
  1: source.SourceFileText.<init>: 1,22% (399 inclusive)
  1: util.apache.CharSequenceTranslator.translate: 0,82% (269 inclusive)
    2: source.SourceFileText.<init>: 0,82% (269 inclusive)
  1: java.lang.Character.toChars: 0,82% (269 inclusive)
    2: util.apache.CharSequenceTranslator.translate: 0,82% (269 inclusive)
      3: util.apache.CharSequenceTranslator.translate: 0,82% (269 inclusive)
        4: source.SourceFileText.<init>: 0,82% (269 inclusive)
  1: java.util.ArrayList.ensureCapacityInternal: 0,56% (182 inclusive)
  1: java.util.Arrays.copyOf: 0,56% (182 inclusive)
    2: java.util.ArrayList.grow: 0,56% (182 inclusive)
      3: java.util.ArrayList.ensureCapacityInternal: 0,56% (182 inclusive)
  1: java.util.ArrayList.grow: 0,56% (182 inclusive)
    2: java.util.ArrayList.ensureCapacityInternal: 0,56% (182 inclusive)
  1: java.io.FileInputStream.open: 0,5% (163 inclusive)
    2: java.io.FileInputStream.<init>: 0,5% (163 inclusive)
      3: source.SourceFileText.<init>: 0,36% (119 inclusive)
        4: source.SourceFileText.<init>: 0,36% (119 inclusive)
      3: sun.misc.URLClassPath$FileLoader$1.getInputStream: 0,13% (44 inclusive)
        4: sun.misc.Resource.cachedInputStream: 0,13% (44 inclusive)
  1: java.io.FileInputStream.<init>: 0,5% (163 inclusive)
    2: source.SourceFileText.<init>: 0,36% (119 inclusive)
      3: source.SourceFileText.<init>: 0,36% (119 inclusive)
    2: sun.misc.URLClassPath$FileLoader$1.getInputStream: 0,13% (44 inclusive)
      3: sun.misc.Resource.cachedInputStream: 0,13% (44 inclusive)
  1: parser.LimitedMemo$Memoed.<init>: 0,2% (66 inclusive)
    2: parser.LimitedMemo.get: 0,2% (66 inclusive)
      3: parser.Matcher.visitChild: 0,13% (41 inclusive)
  1: sun.misc.URLClassPath$FileLoader$1.getInputStream: 0,13% (44 inclusive)
    2: sun.misc.Resource.cachedInputStream: 0,13% (44 inclusive)
  1: sun.misc.Resource.cachedInputStream: 0,13% (44 inclusive)
  1: parser.Matcher.visitChild: 0,13% (41 inclusive)
  1: java.util.HashMap.addEntry: 0,05% (18 inclusive)
    2: java.util.HashMap.put: 0,05% (18 inclusive)
  1: java.util.HashMap.put: 0,05% (18 inclusive)
  1: java.util.HashMap$Entry.<init>: 0,05% (18 inclusive)
    2: java.util.HashMap.addEntry: 0,05% (18 inclusive)
      3: java.util.HashMap.put: 0,05% (18 inclusive)
  1: java.io.File.exists: 0,04% (14 inclusive)
    2: sun.misc.URLClassPath$FileLoader.getResource: 0,04% (14 inclusive)
      3: sun.misc.URLClassPath.getResource: 0,04% (14 inclusive)
  1: sun.misc.URLClassPath.getResource: 0,04% (14 inclusive)
  1: java.io.WinNTFileSystem.getBooleanAttributes: 0,04% (14 inclusive)
    2: java.io.File.exists: 0,04% (14 inclusive)
      3: sun.misc.URLClassPath$FileLoader.getResource: 0,04% (14 inclusive)
        4: sun.misc.URLClassPath.getResource: 0,04% (14 inclusive)
  1: sun.misc.URLClassPath$FileLoader.getResource: 0,04% (14 inclusive)
    2: sun.misc.URLClassPath.getResource: 0,04% (14 inclusive)
  1: sun.nio.ch.FileChannelImpl.map: 0,03% (11 inclusive)
    2: source.SourceFileText.<init>: 0,03% (11 inclusive)
      3: source.SourceFileText.<init>: 0,03% (11 inclusive)
  1: sun.nio.ch.FileChannelImpl.map0: 0,03% (11 inclusive)
    2: sun.nio.ch.FileChannelImpl.map: 0,03% (11 inclusive)
      3: source.SourceFileText.<init>: 0,03% (11 inclusive)
        4: source.SourceFileText.<init>: 0,03% (11 inclusive)
  1: sun.nio.fs.WindowsDirectoryStream.<init>: 0,03% (10 inclusive)
    2: sun.nio.fs.WindowsFileSystemProvider.newDirectoryStream: 0,03% (10 inclusive)
  1: sun.nio.fs.WindowsNativeDispatcher.FindFirstFile: 0,03% (10 inclusive)
    2: sun.nio.fs.WindowsDirectoryStream.<init>: 0,03% (10 inclusive)
      3: sun.nio.fs.WindowsFileSystemProvider.newDirectoryStream: 0,03% (10 inclusive)
  1: sun.nio.fs.WindowsNativeDispatcher.FindFirstFile0: 0,03% (10 inclusive)
    2: sun.nio.fs.WindowsNativeDispatcher.FindFirstFile: 0,03% (10 inclusive)
      3: sun.nio.fs.WindowsDirectoryStream.<init>: 0,03% (10 inclusive)
        4: sun.nio.fs.WindowsFileSystemProvider.newDirectoryStream: 0,03% (10 inclusive)
  1: sun.nio.fs.WindowsFileSystemProvider.newDirectoryStream: 0,03% (10 inclusive)
  1: java.util.zip.ZipFile.open: 0,02% (6 inclusive)
    2: java.util.zip.ZipFile.<init>: 0,02% (6 inclusive)
      3: java.util.zip.ZipFile.<init>: 0,02% (6 inclusive)
        4: java.util.jar.JarFile.<init>: 0,02% (6 inclusive)
  1: java.lang.ClassLoader.findBootstrapClass: 0,02% (6 inclusive)
    2: java.lang.ClassLoader.findBootstrapClassOrNull: 0,02% (6 inclusive)
      3: java.lang.ClassLoader.loadClass: 0,02% (6 inclusive)
        4: java.lang.ClassLoader.loadClass: 0,02% (6 inclusive)
  1: java.util.jar.JarFile.<init>: 0,02% (6 inclusive)
  1: java.util.zip.ZipFile.<init>: 0,02% (6 inclusive)
    2: java.util.jar.JarFile.<init>: 0,02% (6 inclusive)
  1: java.lang.ClassLoader.findBootstrapClassOrNull: 0,02% (6 inclusive)
    2: java.lang.ClassLoader.loadClass: 0,02% (6 inclusive)
      3: java.lang.ClassLoader.loadClass: 0,02% (6 inclusive)
  1: java.lang.ClassLoader.loadClass: 0,02% (6 inclusive)
  1: java.io.File.length: 0,02% (5 inclusive)
    2: sun.misc.URLClassPath$FileLoader$1.getContentLength: 0,02% (5 inclusive)
      3: sun.misc.Resource.getBytes: 0,02% (5 inclusive)
  1: java.lang.ClassLoader.defineClass: 0,02% (5 inclusive)
    2: java.security.SecureClassLoader.defineClass: 0,02% (5 inclusive)
      3: java.net.URLClassLoader.defineClass: 0,02% (5 inclusive)
  1: java.lang.ClassLoader.defineClass1: 0,02% (5 inclusive)
    2: java.lang.ClassLoader.defineClass: 0,02% (5 inclusive)
      3: java.security.SecureClassLoader.defineClass: 0,02% (5 inclusive)
        4: java.net.URLClassLoader.defineClass: 0,02% (5 inclusive)
  1: java.io.WinNTFileSystem.getLength: 0,02% (5 inclusive)
    2: java.io.File.length: 0,02% (5 inclusive)
      3: sun.misc.URLClassPath$FileLoader$1.getContentLength: 0,02% (5 inclusive)
        4: sun.misc.Resource.getBytes: 0,02% (5 inclusive)
  1: sun.misc.Resource.getBytes: 0,02% (5 inclusive)
  1: sun.misc.URLClassPath$FileLoader$1.getContentLength: 0,02% (5 inclusive)
    2: sun.misc.Resource.getBytes: 0,02% (5 inclusive)
  1: java.net.URLClassLoader.defineClass: 0,02% (5 inclusive)
  1: java.security.SecureClassLoader.defineClass: 0,02% (5 inclusive)
    2: java.net.URLClassLoader.defineClass: 0,02% (5 inclusive)
  1: java.lang.Runtime.loadLibrary0: 0,01% (4 inclusive)
  1: java.lang.ClassLoader.loadLibrary0: 0,01% (4 inclusive)
    2: java.lang.ClassLoader.loadLibrary: 0,01% (4 inclusive)
      3: java.lang.Runtime.loadLibrary0: 0,01% (4 inclusive)
  1: java.lang.ClassLoader.loadLibrary: 0,01% (4 inclusive)
    2: java.lang.Runtime.loadLibrary0: 0,01% (4 inclusive)
  1: java.lang.ClassLoader$NativeLibrary.load: 0,01% (4 inclusive)
    2: java.lang.ClassLoader.loadLibrary0: 0,01% (4 inclusive)
      3: java.lang.ClassLoader.loadLibrary: 0,01% (4 inclusive)
        4: java.lang.Runtime.loadLibrary0: 0,01% (4 inclusive)

Method Times by Line Number (times exclusive): 32757 ticks
  1: java.lang.Object.<init>: 79,91% (26177 exclusive)
    2: (Object.java:37): 79,91% (26177 exclusive)
  1: java.util.ArrayList.<init>: 17,9% (5864 exclusive)
    2: (ArrayList.java:132): 17,9% (5864 exclusive)
    2: (ArrayList.java:128): 0% (0 exclusive)
    2: (ArrayList.java:139): 0% (0 exclusive)
  1: java.lang.Character.toChars: 0,82% (269 exclusive)
    2: (Character.java:4976): 0,82% (269 exclusive)
  1: java.util.Arrays.copyOf: 0,56% (182 exclusive)
    2: (Arrays.java:2245): 0,56% (182 exclusive)
    2: (Arrays.java:2219): 0% (0 exclusive)
  1: java.io.FileInputStream.open: 0,5% (163 exclusive)
    2: (FileInputStream.java:Unknown line): 0,5% (163 exclusive)
  1: parser.LimitedMemo$Memoed.<init>: 0,13% (41 exclusive)
    2: (LimitedMemo.java:36): 0,07% (24 exclusive)
    2: (LimitedMemo.java:35): 0,05% (17 exclusive)
    2: (LimitedMemo.java:33): 0% (0 exclusive)
  1: java.io.WinNTFileSystem.getBooleanAttributes: 0,04% (14 exclusive)
    2: (WinNTFileSystem.java:Unknown line): 0,04% (14 exclusive)
  1: sun.nio.ch.FileChannelImpl.map0: 0,03% (11 exclusive)
    2: (FileChannelImpl.java:Unknown line): 0,03% (11 exclusive)
  1: sun.nio.fs.WindowsNativeDispatcher.FindFirstFile0: 0,03% (10 exclusive)
    2: (WindowsNativeDispatcher.java:Unknown line): 0,03% (10 exclusive)
  1: java.util.zip.ZipFile.open: 0,02% (6 exclusive)
    2: (ZipFile.java:Unknown line): 0,02% (6 exclusive)
  1: java.lang.ClassLoader.findBootstrapClass: 0,02% (6 exclusive)
    2: (ClassLoader.java:Unknown line): 0,02% (6 exclusive)
  1: java.lang.ClassLoader.defineClass1: 0,02% (5 exclusive)
    2: (ClassLoader.java:Unknown line): 0,02% (5 exclusive)
  1: java.io.WinNTFileSystem.getLength: 0,02% (5 exclusive)
    2: (WinNTFileSystem.java:Unknown line): 0,02% (5 exclusive)
  1: java.lang.ClassLoader$NativeLibrary.load: 0,01% (4 exclusive)
    2: (ClassLoader.java:Unknown line): 0,01% (4 exclusive)
  1: java.util.AbstractCollection.<init>: 0% (0 exclusive)
    2: (AbstractCollection.java:66): 0% (0 exclusive)
  1: java.lang.Number.<init>: 0% (0 exclusive)
    2: (Number.java:49): 0% (0 exclusive)
  1: parser.Matcher.succeed: 0% (0 exclusive)
    2: (Matcher.java:160): 0% (0 exclusive)
  1: sun.nio.fs.WindowsDirectoryStream.<init>: 0% (0 exclusive)
    2: (WindowsDirectoryStream.java:78): 0% (0 exclusive)
  1: java.util.Collections$UnmodifiableRandomAccessList.<init>: 0% (0 exclusive)
    2: (Collections.java:1282): 0% (0 exclusive)
  1: java.lang.Runtime.loadLibrary0: 0% (0 exclusive)
    2: (Runtime.java:845): 0% (0 exclusive)
  1: java.io.File.length: 0% (0 exclusive)
    2: (File.java:912): 0% (0 exclusive)
  1: java.util.ArrayList.ensureCapacityInternal: 0% (0 exclusive)
    2: (ArrayList.java:187): 0% (0 exclusive)
  1: parser.LimitedMemo.get: 0% (0 exclusive)
    2: (LimitedMemo.java:63): 0% (0 exclusive)
    2: (LimitedMemo.java:69): 0% (0 exclusive)
    2: (LimitedMemo.java:76): 0% (0 exclusive)
  1: parser.ParseData.succeed: 0% (0 exclusive)
    2: (ParseData.java:83): 0% (0 exclusive)
  1: java.lang.ClassLoader.loadLibrary0: 0% (0 exclusive)
    2: (ClassLoader.java:1928): 0% (0 exclusive)
  1: java.lang.ClassLoader.loadLibrary: 0% (0 exclusive)
    2: (ClassLoader.java:1846): 0% (0 exclusive)
  1: java.lang.ClassLoader.defineClass: 0% (0 exclusive)
    2: (ClassLoader.java:791): 0% (0 exclusive)
  1: java.util.Collections$UnmodifiableCollection.<init>: 0% (0 exclusive)
    2: (Collections.java:1049): 0% (0 exclusive)
  1: java.lang.String.substring: 0% (0 exclusive)
    2: (String.java:1960): 0% (0 exclusive)
  1: sun.nio.ch.FileChannelImpl.map: 0% (0 exclusive)
    2: (FileChannelImpl.java:835): 0% (0 exclusive)
  1: java.util.AbstractList$Itr.<init>: 0% (0 exclusive)
    2: (AbstractList.java:330): 0% (0 exclusive)
  1: parser.Matcher.visitChild: 0% (0 exclusive)
    2: (Matcher.java:149): 0% (0 exclusive)
  1: java.lang.Integer.<init>: 0% (0 exclusive)
    2: (Integer.java:659): 0% (0 exclusive)
  1: parser.Match.<init>: 0% (0 exclusive)
    2: (Match.java:87): 0% (0 exclusive)
  1: parser.ParseErrors.<init>: 0% (0 exclusive)
    2: (ParseErrors.java:81): 0% (0 exclusive)
    2: (ParseErrors.java:89): 0% (0 exclusive)
  1: java.util.jar.JarFile.<init>: 0% (0 exclusive)
    2: (JarFile.java:152): 0% (0 exclusive)
  1: java.util.zip.ZipFile.<init>: 0% (0 exclusive)
    2: (ZipFile.java:144): 0% (0 exclusive)
    2: (ZipFile.java:214): 0% (0 exclusive)
  1: parser.ParseData.<init>: 0% (0 exclusive)
    2: (ParseData.java:38): 0% (0 exclusive)
    2: (ParseData.java:44): 0% (0 exclusive)
    2: (ParseData.java:47): 0% (0 exclusive)
  1: java.util.AbstractList.iterator: 0% (0 exclusive)
    2: (AbstractList.java:288): 0% (0 exclusive)
  1: java.lang.ClassLoader.findBootstrapClassOrNull: 0% (0 exclusive)
    2: (ClassLoader.java:1061): 0% (0 exclusive)
  1: source.SourceFileText.at: 0% (0 exclusive)
    2: (SourceFileText.java:143): 0% (0 exclusive)
  1: util.apache.CharSequenceTranslator.translate: 0% (0 exclusive)
    2: (CharSequenceTranslator.java:59): 0% (0 exclusive)
    2: (CharSequenceTranslator.java:87): 0% (0 exclusive)
  1: java.util.HashMap.addEntry: 0% (0 exclusive)
    2: (HashMap.java:766): 0% (0 exclusive)
  1: sun.nio.fs.WindowsNativeDispatcher.FindFirstFile: 0% (0 exclusive)
    2: (WindowsNativeDispatcher.java:174): 0% (0 exclusive)
  1: java.util.HashMap.put: 0% (0 exclusive)
    2: (HashMap.java:402): 0% (0 exclusive)
  1: source.SourceFileText.<init>: 0% (0 exclusive)
    2: (SourceFileText.java:107): 0% (0 exclusive)
    2: (SourceFileText.java:112): 0% (0 exclusive)
    2: (SourceFileText.java:118): 0% (0 exclusive)
    2: (SourceFileText.java:99): 0% (0 exclusive)
  1: java.util.ArrayList.iterator: 0% (0 exclusive)
    2: (ArrayList.java:774): 0% (0 exclusive)
  1: java.util.ArrayList.grow: 0% (0 exclusive)
    2: (ArrayList.java:213): 0% (0 exclusive)
  1: java.util.ArrayList$Itr.<init>: 0% (0 exclusive)
    2: (ArrayList.java:780): 0% (0 exclusive)
  1: sun.misc.URLClassPath$FileLoader$1.getInputStream: 0% (0 exclusive)
    2: (URLClassPath.java:1063): 0% (0 exclusive)
  1: sun.misc.Resource.getBytes: 0% (0 exclusive)
    2: (Resource.java:100): 0% (0 exclusive)
  1: java.io.File.exists: 0% (0 exclusive)
    2: (File.java:772): 0% (0 exclusive)
  1: java.lang.String.<init>: 0% (0 exclusive)
    2: (String.java:645): 0% (0 exclusive)
  1: sun.misc.URLClassPath$FileLoader$1.getContentLength: 0% (0 exclusive)
    2: (URLClassPath.java:1065): 0% (0 exclusive)
  1: java.util.HashMap$Entry.<init>: 0% (0 exclusive)
    2: (HashMap.java:696): 0% (0 exclusive)
  1: sun.misc.URLClassPath.getResource: 0% (0 exclusive)
    2: (URLClassPath.java:195): 0% (0 exclusive)
  1: java.lang.ClassLoader.loadClass: 0% (0 exclusive)
    2: (ClassLoader.java:410): 0% (0 exclusive)
    2: (ClassLoader.java:412): 0% (0 exclusive)
  1: java.net.URLClassLoader.defineClass: 0% (0 exclusive)
    2: (URLClassLoader.java:449): 0% (0 exclusive)
  1: parser.Matcher.parse: 0% (0 exclusive)
    2: (Matcher.java:133): 0% (0 exclusive)
  1: java.lang.Integer.valueOf: 0% (0 exclusive)
    2: (Integer.java:642): 0% (0 exclusive)
  1: sun.misc.URLClassPath$FileLoader.getResource: 0% (0 exclusive)
    2: (URLClassPath.java:1057): 0% (0 exclusive)
  1: sun.misc.Resource.cachedInputStream: 0% (0 exclusive)
    2: (Resource.java:77): 0% (0 exclusive)
  1: sun.nio.fs.WindowsFileSystemProvider.newDirectoryStream: 0% (0 exclusive)
    2: (WindowsFileSystemProvider.java:526): 0% (0 exclusive)
  1: java.security.SecureClassLoader.defineClass: 0% (0 exclusive)
    2: (SecureClassLoader.java:142): 0% (0 exclusive)
  1: java.util.AbstractList.<init>: 0% (0 exclusive)
    2: (AbstractList.java:76): 0% (0 exclusive)
  1: java.io.FileInputStream.<init>: 0% (0 exclusive)
    2: (FileInputStream.java:138): 0% (0 exclusive)
  1: java.util.Collections$UnmodifiableList.<init>: 0% (0 exclusive)
    2: (Collections.java:1204): 0% (0 exclusive)
